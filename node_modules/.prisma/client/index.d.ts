
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Cryptocurrency
 * 
 */
export type Cryptocurrency = $Result.DefaultSelection<Prisma.$CryptocurrencyPayload>
/**
 * Model CryptoWallet
 * 
 */
export type CryptoWallet = $Result.DefaultSelection<Prisma.$CryptoWalletPayload>
/**
 * Model FiatTransaction
 * 
 */
export type FiatTransaction = $Result.DefaultSelection<Prisma.$FiatTransactionPayload>
/**
 * Model BuyOrder
 * 
 */
export type BuyOrder = $Result.DefaultSelection<Prisma.$BuyOrderPayload>
/**
 * Model SellOrder
 * 
 */
export type SellOrder = $Result.DefaultSelection<Prisma.$SellOrderPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Transactions
 * const transactions = await prisma.transaction.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Transactions
   * const transactions = await prisma.transaction.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cryptocurrency`: Exposes CRUD operations for the **Cryptocurrency** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cryptocurrencies
    * const cryptocurrencies = await prisma.cryptocurrency.findMany()
    * ```
    */
  get cryptocurrency(): Prisma.CryptocurrencyDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.cryptoWallet`: Exposes CRUD operations for the **CryptoWallet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CryptoWallets
    * const cryptoWallets = await prisma.cryptoWallet.findMany()
    * ```
    */
  get cryptoWallet(): Prisma.CryptoWalletDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.fiatTransaction`: Exposes CRUD operations for the **FiatTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FiatTransactions
    * const fiatTransactions = await prisma.fiatTransaction.findMany()
    * ```
    */
  get fiatTransaction(): Prisma.FiatTransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.buyOrder`: Exposes CRUD operations for the **BuyOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BuyOrders
    * const buyOrders = await prisma.buyOrder.findMany()
    * ```
    */
  get buyOrder(): Prisma.BuyOrderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.sellOrder`: Exposes CRUD operations for the **SellOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SellOrders
    * const sellOrders = await prisma.sellOrder.findMany()
    * ```
    */
  get sellOrder(): Prisma.SellOrderDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Transaction: 'Transaction',
    User: 'User',
    Cryptocurrency: 'Cryptocurrency',
    CryptoWallet: 'CryptoWallet',
    FiatTransaction: 'FiatTransaction',
    BuyOrder: 'BuyOrder',
    SellOrder: 'SellOrder'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "transaction" | "user" | "cryptocurrency" | "cryptoWallet" | "fiatTransaction" | "buyOrder" | "sellOrder"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Cryptocurrency: {
        payload: Prisma.$CryptocurrencyPayload<ExtArgs>
        fields: Prisma.CryptocurrencyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CryptocurrencyFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptocurrencyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CryptocurrencyFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptocurrencyPayload>
          }
          findFirst: {
            args: Prisma.CryptocurrencyFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptocurrencyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CryptocurrencyFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptocurrencyPayload>
          }
          findMany: {
            args: Prisma.CryptocurrencyFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptocurrencyPayload>[]
          }
          create: {
            args: Prisma.CryptocurrencyCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptocurrencyPayload>
          }
          createMany: {
            args: Prisma.CryptocurrencyCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CryptocurrencyCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptocurrencyPayload>[]
          }
          delete: {
            args: Prisma.CryptocurrencyDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptocurrencyPayload>
          }
          update: {
            args: Prisma.CryptocurrencyUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptocurrencyPayload>
          }
          deleteMany: {
            args: Prisma.CryptocurrencyDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CryptocurrencyUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CryptocurrencyUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptocurrencyPayload>[]
          }
          upsert: {
            args: Prisma.CryptocurrencyUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptocurrencyPayload>
          }
          aggregate: {
            args: Prisma.CryptocurrencyAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCryptocurrency>
          }
          groupBy: {
            args: Prisma.CryptocurrencyGroupByArgs<ExtArgs>
            result: $Utils.Optional<CryptocurrencyGroupByOutputType>[]
          }
          count: {
            args: Prisma.CryptocurrencyCountArgs<ExtArgs>
            result: $Utils.Optional<CryptocurrencyCountAggregateOutputType> | number
          }
        }
      }
      CryptoWallet: {
        payload: Prisma.$CryptoWalletPayload<ExtArgs>
        fields: Prisma.CryptoWalletFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CryptoWalletFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoWalletPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CryptoWalletFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoWalletPayload>
          }
          findFirst: {
            args: Prisma.CryptoWalletFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoWalletPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CryptoWalletFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoWalletPayload>
          }
          findMany: {
            args: Prisma.CryptoWalletFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoWalletPayload>[]
          }
          create: {
            args: Prisma.CryptoWalletCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoWalletPayload>
          }
          createMany: {
            args: Prisma.CryptoWalletCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CryptoWalletCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoWalletPayload>[]
          }
          delete: {
            args: Prisma.CryptoWalletDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoWalletPayload>
          }
          update: {
            args: Prisma.CryptoWalletUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoWalletPayload>
          }
          deleteMany: {
            args: Prisma.CryptoWalletDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CryptoWalletUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CryptoWalletUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoWalletPayload>[]
          }
          upsert: {
            args: Prisma.CryptoWalletUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CryptoWalletPayload>
          }
          aggregate: {
            args: Prisma.CryptoWalletAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCryptoWallet>
          }
          groupBy: {
            args: Prisma.CryptoWalletGroupByArgs<ExtArgs>
            result: $Utils.Optional<CryptoWalletGroupByOutputType>[]
          }
          count: {
            args: Prisma.CryptoWalletCountArgs<ExtArgs>
            result: $Utils.Optional<CryptoWalletCountAggregateOutputType> | number
          }
        }
      }
      FiatTransaction: {
        payload: Prisma.$FiatTransactionPayload<ExtArgs>
        fields: Prisma.FiatTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FiatTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FiatTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FiatTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FiatTransactionPayload>
          }
          findFirst: {
            args: Prisma.FiatTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FiatTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FiatTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FiatTransactionPayload>
          }
          findMany: {
            args: Prisma.FiatTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FiatTransactionPayload>[]
          }
          create: {
            args: Prisma.FiatTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FiatTransactionPayload>
          }
          createMany: {
            args: Prisma.FiatTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FiatTransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FiatTransactionPayload>[]
          }
          delete: {
            args: Prisma.FiatTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FiatTransactionPayload>
          }
          update: {
            args: Prisma.FiatTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FiatTransactionPayload>
          }
          deleteMany: {
            args: Prisma.FiatTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FiatTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FiatTransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FiatTransactionPayload>[]
          }
          upsert: {
            args: Prisma.FiatTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FiatTransactionPayload>
          }
          aggregate: {
            args: Prisma.FiatTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFiatTransaction>
          }
          groupBy: {
            args: Prisma.FiatTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<FiatTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FiatTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<FiatTransactionCountAggregateOutputType> | number
          }
        }
      }
      BuyOrder: {
        payload: Prisma.$BuyOrderPayload<ExtArgs>
        fields: Prisma.BuyOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BuyOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BuyOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyOrderPayload>
          }
          findFirst: {
            args: Prisma.BuyOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BuyOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyOrderPayload>
          }
          findMany: {
            args: Prisma.BuyOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyOrderPayload>[]
          }
          create: {
            args: Prisma.BuyOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyOrderPayload>
          }
          createMany: {
            args: Prisma.BuyOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BuyOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyOrderPayload>[]
          }
          delete: {
            args: Prisma.BuyOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyOrderPayload>
          }
          update: {
            args: Prisma.BuyOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyOrderPayload>
          }
          deleteMany: {
            args: Prisma.BuyOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BuyOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BuyOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyOrderPayload>[]
          }
          upsert: {
            args: Prisma.BuyOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BuyOrderPayload>
          }
          aggregate: {
            args: Prisma.BuyOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBuyOrder>
          }
          groupBy: {
            args: Prisma.BuyOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<BuyOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.BuyOrderCountArgs<ExtArgs>
            result: $Utils.Optional<BuyOrderCountAggregateOutputType> | number
          }
        }
      }
      SellOrder: {
        payload: Prisma.$SellOrderPayload<ExtArgs>
        fields: Prisma.SellOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SellOrderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SellOrderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellOrderPayload>
          }
          findFirst: {
            args: Prisma.SellOrderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SellOrderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellOrderPayload>
          }
          findMany: {
            args: Prisma.SellOrderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellOrderPayload>[]
          }
          create: {
            args: Prisma.SellOrderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellOrderPayload>
          }
          createMany: {
            args: Prisma.SellOrderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SellOrderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellOrderPayload>[]
          }
          delete: {
            args: Prisma.SellOrderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellOrderPayload>
          }
          update: {
            args: Prisma.SellOrderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellOrderPayload>
          }
          deleteMany: {
            args: Prisma.SellOrderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SellOrderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SellOrderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellOrderPayload>[]
          }
          upsert: {
            args: Prisma.SellOrderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SellOrderPayload>
          }
          aggregate: {
            args: Prisma.SellOrderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSellOrder>
          }
          groupBy: {
            args: Prisma.SellOrderGroupByArgs<ExtArgs>
            result: $Utils.Optional<SellOrderGroupByOutputType>[]
          }
          count: {
            args: Prisma.SellOrderCountArgs<ExtArgs>
            result: $Utils.Optional<SellOrderCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    transaction?: TransactionOmit
    user?: UserOmit
    cryptocurrency?: CryptocurrencyOmit
    cryptoWallet?: CryptoWalletOmit
    fiatTransaction?: FiatTransactionOmit
    buyOrder?: BuyOrderOmit
    sellOrder?: SellOrderOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    crypto_wallet: number
    transactions: number
    receivedTransactions: number
    fiatTransaction: number
    buy_orders: number
    sell_orders: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    crypto_wallet?: boolean | UserCountOutputTypeCountCrypto_walletArgs
    transactions?: boolean | UserCountOutputTypeCountTransactionsArgs
    receivedTransactions?: boolean | UserCountOutputTypeCountReceivedTransactionsArgs
    fiatTransaction?: boolean | UserCountOutputTypeCountFiatTransactionArgs
    buy_orders?: boolean | UserCountOutputTypeCountBuy_ordersArgs
    sell_orders?: boolean | UserCountOutputTypeCountSell_ordersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCrypto_walletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CryptoWalletWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReceivedTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFiatTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FiatTransactionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBuy_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyOrderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSell_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SellOrderWhereInput
  }


  /**
   * Count Type CryptocurrencyCountOutputType
   */

  export type CryptocurrencyCountOutputType = {
    transactions: number
    crypto_wallet: number
    buy_orders: number
    sell_orders: number
  }

  export type CryptocurrencyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | CryptocurrencyCountOutputTypeCountTransactionsArgs
    crypto_wallet?: boolean | CryptocurrencyCountOutputTypeCountCrypto_walletArgs
    buy_orders?: boolean | CryptocurrencyCountOutputTypeCountBuy_ordersArgs
    sell_orders?: boolean | CryptocurrencyCountOutputTypeCountSell_ordersArgs
  }

  // Custom InputTypes
  /**
   * CryptocurrencyCountOutputType without action
   */
  export type CryptocurrencyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptocurrencyCountOutputType
     */
    select?: CryptocurrencyCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CryptocurrencyCountOutputType without action
   */
  export type CryptocurrencyCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * CryptocurrencyCountOutputType without action
   */
  export type CryptocurrencyCountOutputTypeCountCrypto_walletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CryptoWalletWhereInput
  }

  /**
   * CryptocurrencyCountOutputType without action
   */
  export type CryptocurrencyCountOutputTypeCountBuy_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyOrderWhereInput
  }

  /**
   * CryptocurrencyCountOutputType without action
   */
  export type CryptocurrencyCountOutputTypeCountSell_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SellOrderWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    transaction_id: number | null
    from_user_id: number | null
    to_user_id: number | null
    crypto_id: number | null
    amount: number | null
    fiat_amount: number | null
  }

  export type TransactionSumAggregateOutputType = {
    transaction_id: number | null
    from_user_id: number | null
    to_user_id: number | null
    crypto_id: number | null
    amount: number | null
    fiat_amount: number | null
  }

  export type TransactionMinAggregateOutputType = {
    transaction_id: number | null
    from_user_id: number | null
    to_user_id: number | null
    crypto_id: number | null
    amount: number | null
    fiat_amount: number | null
    status: string | null
    transaction_type: string | null
    timestamp: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    transaction_id: number | null
    from_user_id: number | null
    to_user_id: number | null
    crypto_id: number | null
    amount: number | null
    fiat_amount: number | null
    status: string | null
    transaction_type: string | null
    timestamp: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    transaction_id: number
    from_user_id: number
    to_user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status: number
    transaction_type: number
    timestamp: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    transaction_id?: true
    from_user_id?: true
    to_user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
  }

  export type TransactionSumAggregateInputType = {
    transaction_id?: true
    from_user_id?: true
    to_user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
  }

  export type TransactionMinAggregateInputType = {
    transaction_id?: true
    from_user_id?: true
    to_user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
    status?: true
    transaction_type?: true
    timestamp?: true
  }

  export type TransactionMaxAggregateInputType = {
    transaction_id?: true
    from_user_id?: true
    to_user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
    status?: true
    transaction_type?: true
    timestamp?: true
  }

  export type TransactionCountAggregateInputType = {
    transaction_id?: true
    from_user_id?: true
    to_user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
    status?: true
    transaction_type?: true
    timestamp?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    transaction_id: number
    from_user_id: number
    to_user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status: string
    transaction_type: string
    timestamp: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    transaction_id?: boolean
    from_user_id?: boolean
    to_user_id?: boolean
    crypto_id?: boolean
    amount?: boolean
    fiat_amount?: boolean
    status?: boolean
    transaction_type?: boolean
    timestamp?: boolean
    from_user?: boolean | UserDefaultArgs<ExtArgs>
    to_user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    transaction_id?: boolean
    from_user_id?: boolean
    to_user_id?: boolean
    crypto_id?: boolean
    amount?: boolean
    fiat_amount?: boolean
    status?: boolean
    transaction_type?: boolean
    timestamp?: boolean
    from_user?: boolean | UserDefaultArgs<ExtArgs>
    to_user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    transaction_id?: boolean
    from_user_id?: boolean
    to_user_id?: boolean
    crypto_id?: boolean
    amount?: boolean
    fiat_amount?: boolean
    status?: boolean
    transaction_type?: boolean
    timestamp?: boolean
    from_user?: boolean | UserDefaultArgs<ExtArgs>
    to_user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    transaction_id?: boolean
    from_user_id?: boolean
    to_user_id?: boolean
    crypto_id?: boolean
    amount?: boolean
    fiat_amount?: boolean
    status?: boolean
    transaction_type?: boolean
    timestamp?: boolean
  }

  export type TransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"transaction_id" | "from_user_id" | "to_user_id" | "crypto_id" | "amount" | "fiat_amount" | "status" | "transaction_type" | "timestamp", ExtArgs["result"]["transaction"]>
  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    from_user?: boolean | UserDefaultArgs<ExtArgs>
    to_user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    from_user?: boolean | UserDefaultArgs<ExtArgs>
    to_user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    from_user?: boolean | UserDefaultArgs<ExtArgs>
    to_user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      from_user: Prisma.$UserPayload<ExtArgs>
      to_user: Prisma.$UserPayload<ExtArgs>
      cryptocurrency: Prisma.$CryptocurrencyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      transaction_id: number
      from_user_id: number
      to_user_id: number
      crypto_id: number
      amount: number
      fiat_amount: number
      status: string
      transaction_type: string
      timestamp: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `transaction_id`
     * const transactionWithTransaction_idOnly = await prisma.transaction.findMany({ select: { transaction_id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `transaction_id`
     * const transactionWithTransaction_idOnly = await prisma.transaction.createManyAndReturn({
     *   select: { transaction_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {TransactionUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `transaction_id`
     * const transactionWithTransaction_idOnly = await prisma.transaction.updateManyAndReturn({
     *   select: { transaction_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    from_user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    to_user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cryptocurrency<T extends CryptocurrencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CryptocurrencyDefaultArgs<ExtArgs>>): Prisma__CryptocurrencyClient<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */ 
  interface TransactionFieldRefs {
    readonly transaction_id: FieldRef<"Transaction", 'Int'>
    readonly from_user_id: FieldRef<"Transaction", 'Int'>
    readonly to_user_id: FieldRef<"Transaction", 'Int'>
    readonly crypto_id: FieldRef<"Transaction", 'Int'>
    readonly amount: FieldRef<"Transaction", 'Float'>
    readonly fiat_amount: FieldRef<"Transaction", 'Float'>
    readonly status: FieldRef<"Transaction", 'String'>
    readonly transaction_type: FieldRef<"Transaction", 'String'>
    readonly timestamp: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transaction updateManyAndReturn
   */
  export type TransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    user_id: number | null
    fiat_balance: number | null
  }

  export type UserSumAggregateOutputType = {
    user_id: number | null
    fiat_balance: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: number | null
    username: string | null
    email: string | null
    phone_number: string | null
    password: string | null
    fiat_balance: number | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: number | null
    username: string | null
    email: string | null
    phone_number: string | null
    password: string | null
    fiat_balance: number | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    username: number
    email: number
    phone_number: number
    password: number
    fiat_balance: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    user_id?: true
    fiat_balance?: true
  }

  export type UserSumAggregateInputType = {
    user_id?: true
    fiat_balance?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    phone_number?: true
    password?: true
    fiat_balance?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    phone_number?: true
    password?: true
    fiat_balance?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    username?: true
    email?: true
    phone_number?: true
    password?: true
    fiat_balance?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: number
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    username?: boolean
    email?: boolean
    phone_number?: boolean
    password?: boolean
    fiat_balance?: boolean
    crypto_wallet?: boolean | User$crypto_walletArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    receivedTransactions?: boolean | User$receivedTransactionsArgs<ExtArgs>
    fiatTransaction?: boolean | User$fiatTransactionArgs<ExtArgs>
    buy_orders?: boolean | User$buy_ordersArgs<ExtArgs>
    sell_orders?: boolean | User$sell_ordersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    username?: boolean
    email?: boolean
    phone_number?: boolean
    password?: boolean
    fiat_balance?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    username?: boolean
    email?: boolean
    phone_number?: boolean
    password?: boolean
    fiat_balance?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    user_id?: boolean
    username?: boolean
    email?: boolean
    phone_number?: boolean
    password?: boolean
    fiat_balance?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"user_id" | "username" | "email" | "phone_number" | "password" | "fiat_balance", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    crypto_wallet?: boolean | User$crypto_walletArgs<ExtArgs>
    transactions?: boolean | User$transactionsArgs<ExtArgs>
    receivedTransactions?: boolean | User$receivedTransactionsArgs<ExtArgs>
    fiatTransaction?: boolean | User$fiatTransactionArgs<ExtArgs>
    buy_orders?: boolean | User$buy_ordersArgs<ExtArgs>
    sell_orders?: boolean | User$sell_ordersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      crypto_wallet: Prisma.$CryptoWalletPayload<ExtArgs>[]
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      receivedTransactions: Prisma.$TransactionPayload<ExtArgs>[]
      fiatTransaction: Prisma.$FiatTransactionPayload<ExtArgs>[]
      buy_orders: Prisma.$BuyOrderPayload<ExtArgs>[]
      sell_orders: Prisma.$SellOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      username: string
      email: string
      phone_number: string
      password: string
      fiat_balance: number
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `user_id`
     * const userWithUser_idOnly = await prisma.user.createManyAndReturn({
     *   select: { user_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `user_id`
     * const userWithUser_idOnly = await prisma.user.updateManyAndReturn({
     *   select: { user_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    crypto_wallet<T extends User$crypto_walletArgs<ExtArgs> = {}>(args?: Subset<T, User$crypto_walletArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptoWalletPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactions<T extends User$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    receivedTransactions<T extends User$receivedTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, User$receivedTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    fiatTransaction<T extends User$fiatTransactionArgs<ExtArgs> = {}>(args?: Subset<T, User$fiatTransactionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FiatTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    buy_orders<T extends User$buy_ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$buy_ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sell_orders<T extends User$sell_ordersArgs<ExtArgs> = {}>(args?: Subset<T, User$sell_ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly user_id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone_number: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly fiat_balance: FieldRef<"User", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.crypto_wallet
   */
  export type User$crypto_walletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletInclude<ExtArgs> | null
    where?: CryptoWalletWhereInput
    orderBy?: CryptoWalletOrderByWithRelationInput | CryptoWalletOrderByWithRelationInput[]
    cursor?: CryptoWalletWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CryptoWalletScalarFieldEnum | CryptoWalletScalarFieldEnum[]
  }

  /**
   * User.transactions
   */
  export type User$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.receivedTransactions
   */
  export type User$receivedTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * User.fiatTransaction
   */
  export type User$fiatTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiatTransaction
     */
    select?: FiatTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FiatTransaction
     */
    omit?: FiatTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FiatTransactionInclude<ExtArgs> | null
    where?: FiatTransactionWhereInput
    orderBy?: FiatTransactionOrderByWithRelationInput | FiatTransactionOrderByWithRelationInput[]
    cursor?: FiatTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FiatTransactionScalarFieldEnum | FiatTransactionScalarFieldEnum[]
  }

  /**
   * User.buy_orders
   */
  export type User$buy_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderInclude<ExtArgs> | null
    where?: BuyOrderWhereInput
    orderBy?: BuyOrderOrderByWithRelationInput | BuyOrderOrderByWithRelationInput[]
    cursor?: BuyOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyOrderScalarFieldEnum | BuyOrderScalarFieldEnum[]
  }

  /**
   * User.sell_orders
   */
  export type User$sell_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderInclude<ExtArgs> | null
    where?: SellOrderWhereInput
    orderBy?: SellOrderOrderByWithRelationInput | SellOrderOrderByWithRelationInput[]
    cursor?: SellOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SellOrderScalarFieldEnum | SellOrderScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Cryptocurrency
   */

  export type AggregateCryptocurrency = {
    _count: CryptocurrencyCountAggregateOutputType | null
    _avg: CryptocurrencyAvgAggregateOutputType | null
    _sum: CryptocurrencySumAggregateOutputType | null
    _min: CryptocurrencyMinAggregateOutputType | null
    _max: CryptocurrencyMaxAggregateOutputType | null
  }

  export type CryptocurrencyAvgAggregateOutputType = {
    crypto_id: number | null
    price_usd: number | null
  }

  export type CryptocurrencySumAggregateOutputType = {
    crypto_id: number | null
    price_usd: number | null
  }

  export type CryptocurrencyMinAggregateOutputType = {
    crypto_id: number | null
    name: string | null
    symbol: string | null
    price_usd: number | null
  }

  export type CryptocurrencyMaxAggregateOutputType = {
    crypto_id: number | null
    name: string | null
    symbol: string | null
    price_usd: number | null
  }

  export type CryptocurrencyCountAggregateOutputType = {
    crypto_id: number
    name: number
    symbol: number
    price_usd: number
    _all: number
  }


  export type CryptocurrencyAvgAggregateInputType = {
    crypto_id?: true
    price_usd?: true
  }

  export type CryptocurrencySumAggregateInputType = {
    crypto_id?: true
    price_usd?: true
  }

  export type CryptocurrencyMinAggregateInputType = {
    crypto_id?: true
    name?: true
    symbol?: true
    price_usd?: true
  }

  export type CryptocurrencyMaxAggregateInputType = {
    crypto_id?: true
    name?: true
    symbol?: true
    price_usd?: true
  }

  export type CryptocurrencyCountAggregateInputType = {
    crypto_id?: true
    name?: true
    symbol?: true
    price_usd?: true
    _all?: true
  }

  export type CryptocurrencyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cryptocurrency to aggregate.
     */
    where?: CryptocurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cryptocurrencies to fetch.
     */
    orderBy?: CryptocurrencyOrderByWithRelationInput | CryptocurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CryptocurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cryptocurrencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cryptocurrencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cryptocurrencies
    **/
    _count?: true | CryptocurrencyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CryptocurrencyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CryptocurrencySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CryptocurrencyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CryptocurrencyMaxAggregateInputType
  }

  export type GetCryptocurrencyAggregateType<T extends CryptocurrencyAggregateArgs> = {
        [P in keyof T & keyof AggregateCryptocurrency]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCryptocurrency[P]>
      : GetScalarType<T[P], AggregateCryptocurrency[P]>
  }




  export type CryptocurrencyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CryptocurrencyWhereInput
    orderBy?: CryptocurrencyOrderByWithAggregationInput | CryptocurrencyOrderByWithAggregationInput[]
    by: CryptocurrencyScalarFieldEnum[] | CryptocurrencyScalarFieldEnum
    having?: CryptocurrencyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CryptocurrencyCountAggregateInputType | true
    _avg?: CryptocurrencyAvgAggregateInputType
    _sum?: CryptocurrencySumAggregateInputType
    _min?: CryptocurrencyMinAggregateInputType
    _max?: CryptocurrencyMaxAggregateInputType
  }

  export type CryptocurrencyGroupByOutputType = {
    crypto_id: number
    name: string
    symbol: string
    price_usd: number
    _count: CryptocurrencyCountAggregateOutputType | null
    _avg: CryptocurrencyAvgAggregateOutputType | null
    _sum: CryptocurrencySumAggregateOutputType | null
    _min: CryptocurrencyMinAggregateOutputType | null
    _max: CryptocurrencyMaxAggregateOutputType | null
  }

  type GetCryptocurrencyGroupByPayload<T extends CryptocurrencyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CryptocurrencyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CryptocurrencyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CryptocurrencyGroupByOutputType[P]>
            : GetScalarType<T[P], CryptocurrencyGroupByOutputType[P]>
        }
      >
    >


  export type CryptocurrencySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    crypto_id?: boolean
    name?: boolean
    symbol?: boolean
    price_usd?: boolean
    transactions?: boolean | Cryptocurrency$transactionsArgs<ExtArgs>
    crypto_wallet?: boolean | Cryptocurrency$crypto_walletArgs<ExtArgs>
    buy_orders?: boolean | Cryptocurrency$buy_ordersArgs<ExtArgs>
    sell_orders?: boolean | Cryptocurrency$sell_ordersArgs<ExtArgs>
    _count?: boolean | CryptocurrencyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cryptocurrency"]>

  export type CryptocurrencySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    crypto_id?: boolean
    name?: boolean
    symbol?: boolean
    price_usd?: boolean
  }, ExtArgs["result"]["cryptocurrency"]>

  export type CryptocurrencySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    crypto_id?: boolean
    name?: boolean
    symbol?: boolean
    price_usd?: boolean
  }, ExtArgs["result"]["cryptocurrency"]>

  export type CryptocurrencySelectScalar = {
    crypto_id?: boolean
    name?: boolean
    symbol?: boolean
    price_usd?: boolean
  }

  export type CryptocurrencyOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"crypto_id" | "name" | "symbol" | "price_usd", ExtArgs["result"]["cryptocurrency"]>
  export type CryptocurrencyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | Cryptocurrency$transactionsArgs<ExtArgs>
    crypto_wallet?: boolean | Cryptocurrency$crypto_walletArgs<ExtArgs>
    buy_orders?: boolean | Cryptocurrency$buy_ordersArgs<ExtArgs>
    sell_orders?: boolean | Cryptocurrency$sell_ordersArgs<ExtArgs>
    _count?: boolean | CryptocurrencyCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CryptocurrencyIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CryptocurrencyIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CryptocurrencyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Cryptocurrency"
    objects: {
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      crypto_wallet: Prisma.$CryptoWalletPayload<ExtArgs>[]
      buy_orders: Prisma.$BuyOrderPayload<ExtArgs>[]
      sell_orders: Prisma.$SellOrderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      crypto_id: number
      name: string
      symbol: string
      price_usd: number
    }, ExtArgs["result"]["cryptocurrency"]>
    composites: {}
  }

  type CryptocurrencyGetPayload<S extends boolean | null | undefined | CryptocurrencyDefaultArgs> = $Result.GetResult<Prisma.$CryptocurrencyPayload, S>

  type CryptocurrencyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CryptocurrencyFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CryptocurrencyCountAggregateInputType | true
    }

  export interface CryptocurrencyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Cryptocurrency'], meta: { name: 'Cryptocurrency' } }
    /**
     * Find zero or one Cryptocurrency that matches the filter.
     * @param {CryptocurrencyFindUniqueArgs} args - Arguments to find a Cryptocurrency
     * @example
     * // Get one Cryptocurrency
     * const cryptocurrency = await prisma.cryptocurrency.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CryptocurrencyFindUniqueArgs>(args: SelectSubset<T, CryptocurrencyFindUniqueArgs<ExtArgs>>): Prisma__CryptocurrencyClient<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Cryptocurrency that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CryptocurrencyFindUniqueOrThrowArgs} args - Arguments to find a Cryptocurrency
     * @example
     * // Get one Cryptocurrency
     * const cryptocurrency = await prisma.cryptocurrency.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CryptocurrencyFindUniqueOrThrowArgs>(args: SelectSubset<T, CryptocurrencyFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CryptocurrencyClient<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cryptocurrency that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptocurrencyFindFirstArgs} args - Arguments to find a Cryptocurrency
     * @example
     * // Get one Cryptocurrency
     * const cryptocurrency = await prisma.cryptocurrency.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CryptocurrencyFindFirstArgs>(args?: SelectSubset<T, CryptocurrencyFindFirstArgs<ExtArgs>>): Prisma__CryptocurrencyClient<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Cryptocurrency that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptocurrencyFindFirstOrThrowArgs} args - Arguments to find a Cryptocurrency
     * @example
     * // Get one Cryptocurrency
     * const cryptocurrency = await prisma.cryptocurrency.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CryptocurrencyFindFirstOrThrowArgs>(args?: SelectSubset<T, CryptocurrencyFindFirstOrThrowArgs<ExtArgs>>): Prisma__CryptocurrencyClient<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Cryptocurrencies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptocurrencyFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cryptocurrencies
     * const cryptocurrencies = await prisma.cryptocurrency.findMany()
     * 
     * // Get first 10 Cryptocurrencies
     * const cryptocurrencies = await prisma.cryptocurrency.findMany({ take: 10 })
     * 
     * // Only select the `crypto_id`
     * const cryptocurrencyWithCrypto_idOnly = await prisma.cryptocurrency.findMany({ select: { crypto_id: true } })
     * 
     */
    findMany<T extends CryptocurrencyFindManyArgs>(args?: SelectSubset<T, CryptocurrencyFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Cryptocurrency.
     * @param {CryptocurrencyCreateArgs} args - Arguments to create a Cryptocurrency.
     * @example
     * // Create one Cryptocurrency
     * const Cryptocurrency = await prisma.cryptocurrency.create({
     *   data: {
     *     // ... data to create a Cryptocurrency
     *   }
     * })
     * 
     */
    create<T extends CryptocurrencyCreateArgs>(args: SelectSubset<T, CryptocurrencyCreateArgs<ExtArgs>>): Prisma__CryptocurrencyClient<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Cryptocurrencies.
     * @param {CryptocurrencyCreateManyArgs} args - Arguments to create many Cryptocurrencies.
     * @example
     * // Create many Cryptocurrencies
     * const cryptocurrency = await prisma.cryptocurrency.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CryptocurrencyCreateManyArgs>(args?: SelectSubset<T, CryptocurrencyCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cryptocurrencies and returns the data saved in the database.
     * @param {CryptocurrencyCreateManyAndReturnArgs} args - Arguments to create many Cryptocurrencies.
     * @example
     * // Create many Cryptocurrencies
     * const cryptocurrency = await prisma.cryptocurrency.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cryptocurrencies and only return the `crypto_id`
     * const cryptocurrencyWithCrypto_idOnly = await prisma.cryptocurrency.createManyAndReturn({
     *   select: { crypto_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CryptocurrencyCreateManyAndReturnArgs>(args?: SelectSubset<T, CryptocurrencyCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Cryptocurrency.
     * @param {CryptocurrencyDeleteArgs} args - Arguments to delete one Cryptocurrency.
     * @example
     * // Delete one Cryptocurrency
     * const Cryptocurrency = await prisma.cryptocurrency.delete({
     *   where: {
     *     // ... filter to delete one Cryptocurrency
     *   }
     * })
     * 
     */
    delete<T extends CryptocurrencyDeleteArgs>(args: SelectSubset<T, CryptocurrencyDeleteArgs<ExtArgs>>): Prisma__CryptocurrencyClient<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Cryptocurrency.
     * @param {CryptocurrencyUpdateArgs} args - Arguments to update one Cryptocurrency.
     * @example
     * // Update one Cryptocurrency
     * const cryptocurrency = await prisma.cryptocurrency.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CryptocurrencyUpdateArgs>(args: SelectSubset<T, CryptocurrencyUpdateArgs<ExtArgs>>): Prisma__CryptocurrencyClient<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Cryptocurrencies.
     * @param {CryptocurrencyDeleteManyArgs} args - Arguments to filter Cryptocurrencies to delete.
     * @example
     * // Delete a few Cryptocurrencies
     * const { count } = await prisma.cryptocurrency.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CryptocurrencyDeleteManyArgs>(args?: SelectSubset<T, CryptocurrencyDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cryptocurrencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptocurrencyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cryptocurrencies
     * const cryptocurrency = await prisma.cryptocurrency.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CryptocurrencyUpdateManyArgs>(args: SelectSubset<T, CryptocurrencyUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cryptocurrencies and returns the data updated in the database.
     * @param {CryptocurrencyUpdateManyAndReturnArgs} args - Arguments to update many Cryptocurrencies.
     * @example
     * // Update many Cryptocurrencies
     * const cryptocurrency = await prisma.cryptocurrency.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Cryptocurrencies and only return the `crypto_id`
     * const cryptocurrencyWithCrypto_idOnly = await prisma.cryptocurrency.updateManyAndReturn({
     *   select: { crypto_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CryptocurrencyUpdateManyAndReturnArgs>(args: SelectSubset<T, CryptocurrencyUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Cryptocurrency.
     * @param {CryptocurrencyUpsertArgs} args - Arguments to update or create a Cryptocurrency.
     * @example
     * // Update or create a Cryptocurrency
     * const cryptocurrency = await prisma.cryptocurrency.upsert({
     *   create: {
     *     // ... data to create a Cryptocurrency
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Cryptocurrency we want to update
     *   }
     * })
     */
    upsert<T extends CryptocurrencyUpsertArgs>(args: SelectSubset<T, CryptocurrencyUpsertArgs<ExtArgs>>): Prisma__CryptocurrencyClient<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Cryptocurrencies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptocurrencyCountArgs} args - Arguments to filter Cryptocurrencies to count.
     * @example
     * // Count the number of Cryptocurrencies
     * const count = await prisma.cryptocurrency.count({
     *   where: {
     *     // ... the filter for the Cryptocurrencies we want to count
     *   }
     * })
    **/
    count<T extends CryptocurrencyCountArgs>(
      args?: Subset<T, CryptocurrencyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CryptocurrencyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Cryptocurrency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptocurrencyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CryptocurrencyAggregateArgs>(args: Subset<T, CryptocurrencyAggregateArgs>): Prisma.PrismaPromise<GetCryptocurrencyAggregateType<T>>

    /**
     * Group by Cryptocurrency.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptocurrencyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CryptocurrencyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CryptocurrencyGroupByArgs['orderBy'] }
        : { orderBy?: CryptocurrencyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CryptocurrencyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCryptocurrencyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Cryptocurrency model
   */
  readonly fields: CryptocurrencyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Cryptocurrency.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CryptocurrencyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transactions<T extends Cryptocurrency$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Cryptocurrency$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    crypto_wallet<T extends Cryptocurrency$crypto_walletArgs<ExtArgs> = {}>(args?: Subset<T, Cryptocurrency$crypto_walletArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptoWalletPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    buy_orders<T extends Cryptocurrency$buy_ordersArgs<ExtArgs> = {}>(args?: Subset<T, Cryptocurrency$buy_ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    sell_orders<T extends Cryptocurrency$sell_ordersArgs<ExtArgs> = {}>(args?: Subset<T, Cryptocurrency$sell_ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Cryptocurrency model
   */ 
  interface CryptocurrencyFieldRefs {
    readonly crypto_id: FieldRef<"Cryptocurrency", 'Int'>
    readonly name: FieldRef<"Cryptocurrency", 'String'>
    readonly symbol: FieldRef<"Cryptocurrency", 'String'>
    readonly price_usd: FieldRef<"Cryptocurrency", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Cryptocurrency findUnique
   */
  export type CryptocurrencyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cryptocurrency
     */
    select?: CryptocurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cryptocurrency
     */
    omit?: CryptocurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptocurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Cryptocurrency to fetch.
     */
    where: CryptocurrencyWhereUniqueInput
  }

  /**
   * Cryptocurrency findUniqueOrThrow
   */
  export type CryptocurrencyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cryptocurrency
     */
    select?: CryptocurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cryptocurrency
     */
    omit?: CryptocurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptocurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Cryptocurrency to fetch.
     */
    where: CryptocurrencyWhereUniqueInput
  }

  /**
   * Cryptocurrency findFirst
   */
  export type CryptocurrencyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cryptocurrency
     */
    select?: CryptocurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cryptocurrency
     */
    omit?: CryptocurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptocurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Cryptocurrency to fetch.
     */
    where?: CryptocurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cryptocurrencies to fetch.
     */
    orderBy?: CryptocurrencyOrderByWithRelationInput | CryptocurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cryptocurrencies.
     */
    cursor?: CryptocurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cryptocurrencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cryptocurrencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cryptocurrencies.
     */
    distinct?: CryptocurrencyScalarFieldEnum | CryptocurrencyScalarFieldEnum[]
  }

  /**
   * Cryptocurrency findFirstOrThrow
   */
  export type CryptocurrencyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cryptocurrency
     */
    select?: CryptocurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cryptocurrency
     */
    omit?: CryptocurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptocurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Cryptocurrency to fetch.
     */
    where?: CryptocurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cryptocurrencies to fetch.
     */
    orderBy?: CryptocurrencyOrderByWithRelationInput | CryptocurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cryptocurrencies.
     */
    cursor?: CryptocurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cryptocurrencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cryptocurrencies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cryptocurrencies.
     */
    distinct?: CryptocurrencyScalarFieldEnum | CryptocurrencyScalarFieldEnum[]
  }

  /**
   * Cryptocurrency findMany
   */
  export type CryptocurrencyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cryptocurrency
     */
    select?: CryptocurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cryptocurrency
     */
    omit?: CryptocurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptocurrencyInclude<ExtArgs> | null
    /**
     * Filter, which Cryptocurrencies to fetch.
     */
    where?: CryptocurrencyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cryptocurrencies to fetch.
     */
    orderBy?: CryptocurrencyOrderByWithRelationInput | CryptocurrencyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cryptocurrencies.
     */
    cursor?: CryptocurrencyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cryptocurrencies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cryptocurrencies.
     */
    skip?: number
    distinct?: CryptocurrencyScalarFieldEnum | CryptocurrencyScalarFieldEnum[]
  }

  /**
   * Cryptocurrency create
   */
  export type CryptocurrencyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cryptocurrency
     */
    select?: CryptocurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cryptocurrency
     */
    omit?: CryptocurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptocurrencyInclude<ExtArgs> | null
    /**
     * The data needed to create a Cryptocurrency.
     */
    data: XOR<CryptocurrencyCreateInput, CryptocurrencyUncheckedCreateInput>
  }

  /**
   * Cryptocurrency createMany
   */
  export type CryptocurrencyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cryptocurrencies.
     */
    data: CryptocurrencyCreateManyInput | CryptocurrencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cryptocurrency createManyAndReturn
   */
  export type CryptocurrencyCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cryptocurrency
     */
    select?: CryptocurrencySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cryptocurrency
     */
    omit?: CryptocurrencyOmit<ExtArgs> | null
    /**
     * The data used to create many Cryptocurrencies.
     */
    data: CryptocurrencyCreateManyInput | CryptocurrencyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Cryptocurrency update
   */
  export type CryptocurrencyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cryptocurrency
     */
    select?: CryptocurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cryptocurrency
     */
    omit?: CryptocurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptocurrencyInclude<ExtArgs> | null
    /**
     * The data needed to update a Cryptocurrency.
     */
    data: XOR<CryptocurrencyUpdateInput, CryptocurrencyUncheckedUpdateInput>
    /**
     * Choose, which Cryptocurrency to update.
     */
    where: CryptocurrencyWhereUniqueInput
  }

  /**
   * Cryptocurrency updateMany
   */
  export type CryptocurrencyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cryptocurrencies.
     */
    data: XOR<CryptocurrencyUpdateManyMutationInput, CryptocurrencyUncheckedUpdateManyInput>
    /**
     * Filter which Cryptocurrencies to update
     */
    where?: CryptocurrencyWhereInput
    /**
     * Limit how many Cryptocurrencies to update.
     */
    limit?: number
  }

  /**
   * Cryptocurrency updateManyAndReturn
   */
  export type CryptocurrencyUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cryptocurrency
     */
    select?: CryptocurrencySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Cryptocurrency
     */
    omit?: CryptocurrencyOmit<ExtArgs> | null
    /**
     * The data used to update Cryptocurrencies.
     */
    data: XOR<CryptocurrencyUpdateManyMutationInput, CryptocurrencyUncheckedUpdateManyInput>
    /**
     * Filter which Cryptocurrencies to update
     */
    where?: CryptocurrencyWhereInput
    /**
     * Limit how many Cryptocurrencies to update.
     */
    limit?: number
  }

  /**
   * Cryptocurrency upsert
   */
  export type CryptocurrencyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cryptocurrency
     */
    select?: CryptocurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cryptocurrency
     */
    omit?: CryptocurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptocurrencyInclude<ExtArgs> | null
    /**
     * The filter to search for the Cryptocurrency to update in case it exists.
     */
    where: CryptocurrencyWhereUniqueInput
    /**
     * In case the Cryptocurrency found by the `where` argument doesn't exist, create a new Cryptocurrency with this data.
     */
    create: XOR<CryptocurrencyCreateInput, CryptocurrencyUncheckedCreateInput>
    /**
     * In case the Cryptocurrency was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CryptocurrencyUpdateInput, CryptocurrencyUncheckedUpdateInput>
  }

  /**
   * Cryptocurrency delete
   */
  export type CryptocurrencyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cryptocurrency
     */
    select?: CryptocurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cryptocurrency
     */
    omit?: CryptocurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptocurrencyInclude<ExtArgs> | null
    /**
     * Filter which Cryptocurrency to delete.
     */
    where: CryptocurrencyWhereUniqueInput
  }

  /**
   * Cryptocurrency deleteMany
   */
  export type CryptocurrencyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cryptocurrencies to delete
     */
    where?: CryptocurrencyWhereInput
    /**
     * Limit how many Cryptocurrencies to delete.
     */
    limit?: number
  }

  /**
   * Cryptocurrency.transactions
   */
  export type Cryptocurrency$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Cryptocurrency.crypto_wallet
   */
  export type Cryptocurrency$crypto_walletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletInclude<ExtArgs> | null
    where?: CryptoWalletWhereInput
    orderBy?: CryptoWalletOrderByWithRelationInput | CryptoWalletOrderByWithRelationInput[]
    cursor?: CryptoWalletWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CryptoWalletScalarFieldEnum | CryptoWalletScalarFieldEnum[]
  }

  /**
   * Cryptocurrency.buy_orders
   */
  export type Cryptocurrency$buy_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderInclude<ExtArgs> | null
    where?: BuyOrderWhereInput
    orderBy?: BuyOrderOrderByWithRelationInput | BuyOrderOrderByWithRelationInput[]
    cursor?: BuyOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BuyOrderScalarFieldEnum | BuyOrderScalarFieldEnum[]
  }

  /**
   * Cryptocurrency.sell_orders
   */
  export type Cryptocurrency$sell_ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderInclude<ExtArgs> | null
    where?: SellOrderWhereInput
    orderBy?: SellOrderOrderByWithRelationInput | SellOrderOrderByWithRelationInput[]
    cursor?: SellOrderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SellOrderScalarFieldEnum | SellOrderScalarFieldEnum[]
  }

  /**
   * Cryptocurrency without action
   */
  export type CryptocurrencyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Cryptocurrency
     */
    select?: CryptocurrencySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Cryptocurrency
     */
    omit?: CryptocurrencyOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptocurrencyInclude<ExtArgs> | null
  }


  /**
   * Model CryptoWallet
   */

  export type AggregateCryptoWallet = {
    _count: CryptoWalletCountAggregateOutputType | null
    _avg: CryptoWalletAvgAggregateOutputType | null
    _sum: CryptoWalletSumAggregateOutputType | null
    _min: CryptoWalletMinAggregateOutputType | null
    _max: CryptoWalletMaxAggregateOutputType | null
  }

  export type CryptoWalletAvgAggregateOutputType = {
    wallet_id: number | null
    user_id: number | null
    crypto_id: number | null
    balance: number | null
  }

  export type CryptoWalletSumAggregateOutputType = {
    wallet_id: number | null
    user_id: number | null
    crypto_id: number | null
    balance: number | null
  }

  export type CryptoWalletMinAggregateOutputType = {
    wallet_id: number | null
    user_id: number | null
    crypto_id: number | null
    balance: number | null
  }

  export type CryptoWalletMaxAggregateOutputType = {
    wallet_id: number | null
    user_id: number | null
    crypto_id: number | null
    balance: number | null
  }

  export type CryptoWalletCountAggregateOutputType = {
    wallet_id: number
    user_id: number
    crypto_id: number
    balance: number
    _all: number
  }


  export type CryptoWalletAvgAggregateInputType = {
    wallet_id?: true
    user_id?: true
    crypto_id?: true
    balance?: true
  }

  export type CryptoWalletSumAggregateInputType = {
    wallet_id?: true
    user_id?: true
    crypto_id?: true
    balance?: true
  }

  export type CryptoWalletMinAggregateInputType = {
    wallet_id?: true
    user_id?: true
    crypto_id?: true
    balance?: true
  }

  export type CryptoWalletMaxAggregateInputType = {
    wallet_id?: true
    user_id?: true
    crypto_id?: true
    balance?: true
  }

  export type CryptoWalletCountAggregateInputType = {
    wallet_id?: true
    user_id?: true
    crypto_id?: true
    balance?: true
    _all?: true
  }

  export type CryptoWalletAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CryptoWallet to aggregate.
     */
    where?: CryptoWalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CryptoWallets to fetch.
     */
    orderBy?: CryptoWalletOrderByWithRelationInput | CryptoWalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CryptoWalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CryptoWallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CryptoWallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CryptoWallets
    **/
    _count?: true | CryptoWalletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CryptoWalletAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CryptoWalletSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CryptoWalletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CryptoWalletMaxAggregateInputType
  }

  export type GetCryptoWalletAggregateType<T extends CryptoWalletAggregateArgs> = {
        [P in keyof T & keyof AggregateCryptoWallet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCryptoWallet[P]>
      : GetScalarType<T[P], AggregateCryptoWallet[P]>
  }




  export type CryptoWalletGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CryptoWalletWhereInput
    orderBy?: CryptoWalletOrderByWithAggregationInput | CryptoWalletOrderByWithAggregationInput[]
    by: CryptoWalletScalarFieldEnum[] | CryptoWalletScalarFieldEnum
    having?: CryptoWalletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CryptoWalletCountAggregateInputType | true
    _avg?: CryptoWalletAvgAggregateInputType
    _sum?: CryptoWalletSumAggregateInputType
    _min?: CryptoWalletMinAggregateInputType
    _max?: CryptoWalletMaxAggregateInputType
  }

  export type CryptoWalletGroupByOutputType = {
    wallet_id: number
    user_id: number
    crypto_id: number
    balance: number
    _count: CryptoWalletCountAggregateOutputType | null
    _avg: CryptoWalletAvgAggregateOutputType | null
    _sum: CryptoWalletSumAggregateOutputType | null
    _min: CryptoWalletMinAggregateOutputType | null
    _max: CryptoWalletMaxAggregateOutputType | null
  }

  type GetCryptoWalletGroupByPayload<T extends CryptoWalletGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CryptoWalletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CryptoWalletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CryptoWalletGroupByOutputType[P]>
            : GetScalarType<T[P], CryptoWalletGroupByOutputType[P]>
        }
      >
    >


  export type CryptoWalletSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    wallet_id?: boolean
    user_id?: boolean
    crypto_id?: boolean
    balance?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cryptoWallet"]>

  export type CryptoWalletSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    wallet_id?: boolean
    user_id?: boolean
    crypto_id?: boolean
    balance?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cryptoWallet"]>

  export type CryptoWalletSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    wallet_id?: boolean
    user_id?: boolean
    crypto_id?: boolean
    balance?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["cryptoWallet"]>

  export type CryptoWalletSelectScalar = {
    wallet_id?: boolean
    user_id?: boolean
    crypto_id?: boolean
    balance?: boolean
  }

  export type CryptoWalletOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"wallet_id" | "user_id" | "crypto_id" | "balance", ExtArgs["result"]["cryptoWallet"]>
  export type CryptoWalletInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }
  export type CryptoWalletIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }
  export type CryptoWalletIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }

  export type $CryptoWalletPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CryptoWallet"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      cryptocurrency: Prisma.$CryptocurrencyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      wallet_id: number
      user_id: number
      crypto_id: number
      balance: number
    }, ExtArgs["result"]["cryptoWallet"]>
    composites: {}
  }

  type CryptoWalletGetPayload<S extends boolean | null | undefined | CryptoWalletDefaultArgs> = $Result.GetResult<Prisma.$CryptoWalletPayload, S>

  type CryptoWalletCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CryptoWalletFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CryptoWalletCountAggregateInputType | true
    }

  export interface CryptoWalletDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CryptoWallet'], meta: { name: 'CryptoWallet' } }
    /**
     * Find zero or one CryptoWallet that matches the filter.
     * @param {CryptoWalletFindUniqueArgs} args - Arguments to find a CryptoWallet
     * @example
     * // Get one CryptoWallet
     * const cryptoWallet = await prisma.cryptoWallet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CryptoWalletFindUniqueArgs>(args: SelectSubset<T, CryptoWalletFindUniqueArgs<ExtArgs>>): Prisma__CryptoWalletClient<$Result.GetResult<Prisma.$CryptoWalletPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CryptoWallet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CryptoWalletFindUniqueOrThrowArgs} args - Arguments to find a CryptoWallet
     * @example
     * // Get one CryptoWallet
     * const cryptoWallet = await prisma.cryptoWallet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CryptoWalletFindUniqueOrThrowArgs>(args: SelectSubset<T, CryptoWalletFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CryptoWalletClient<$Result.GetResult<Prisma.$CryptoWalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CryptoWallet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoWalletFindFirstArgs} args - Arguments to find a CryptoWallet
     * @example
     * // Get one CryptoWallet
     * const cryptoWallet = await prisma.cryptoWallet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CryptoWalletFindFirstArgs>(args?: SelectSubset<T, CryptoWalletFindFirstArgs<ExtArgs>>): Prisma__CryptoWalletClient<$Result.GetResult<Prisma.$CryptoWalletPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CryptoWallet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoWalletFindFirstOrThrowArgs} args - Arguments to find a CryptoWallet
     * @example
     * // Get one CryptoWallet
     * const cryptoWallet = await prisma.cryptoWallet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CryptoWalletFindFirstOrThrowArgs>(args?: SelectSubset<T, CryptoWalletFindFirstOrThrowArgs<ExtArgs>>): Prisma__CryptoWalletClient<$Result.GetResult<Prisma.$CryptoWalletPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CryptoWallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoWalletFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CryptoWallets
     * const cryptoWallets = await prisma.cryptoWallet.findMany()
     * 
     * // Get first 10 CryptoWallets
     * const cryptoWallets = await prisma.cryptoWallet.findMany({ take: 10 })
     * 
     * // Only select the `wallet_id`
     * const cryptoWalletWithWallet_idOnly = await prisma.cryptoWallet.findMany({ select: { wallet_id: true } })
     * 
     */
    findMany<T extends CryptoWalletFindManyArgs>(args?: SelectSubset<T, CryptoWalletFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptoWalletPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CryptoWallet.
     * @param {CryptoWalletCreateArgs} args - Arguments to create a CryptoWallet.
     * @example
     * // Create one CryptoWallet
     * const CryptoWallet = await prisma.cryptoWallet.create({
     *   data: {
     *     // ... data to create a CryptoWallet
     *   }
     * })
     * 
     */
    create<T extends CryptoWalletCreateArgs>(args: SelectSubset<T, CryptoWalletCreateArgs<ExtArgs>>): Prisma__CryptoWalletClient<$Result.GetResult<Prisma.$CryptoWalletPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CryptoWallets.
     * @param {CryptoWalletCreateManyArgs} args - Arguments to create many CryptoWallets.
     * @example
     * // Create many CryptoWallets
     * const cryptoWallet = await prisma.cryptoWallet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CryptoWalletCreateManyArgs>(args?: SelectSubset<T, CryptoWalletCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CryptoWallets and returns the data saved in the database.
     * @param {CryptoWalletCreateManyAndReturnArgs} args - Arguments to create many CryptoWallets.
     * @example
     * // Create many CryptoWallets
     * const cryptoWallet = await prisma.cryptoWallet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CryptoWallets and only return the `wallet_id`
     * const cryptoWalletWithWallet_idOnly = await prisma.cryptoWallet.createManyAndReturn({
     *   select: { wallet_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CryptoWalletCreateManyAndReturnArgs>(args?: SelectSubset<T, CryptoWalletCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptoWalletPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CryptoWallet.
     * @param {CryptoWalletDeleteArgs} args - Arguments to delete one CryptoWallet.
     * @example
     * // Delete one CryptoWallet
     * const CryptoWallet = await prisma.cryptoWallet.delete({
     *   where: {
     *     // ... filter to delete one CryptoWallet
     *   }
     * })
     * 
     */
    delete<T extends CryptoWalletDeleteArgs>(args: SelectSubset<T, CryptoWalletDeleteArgs<ExtArgs>>): Prisma__CryptoWalletClient<$Result.GetResult<Prisma.$CryptoWalletPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CryptoWallet.
     * @param {CryptoWalletUpdateArgs} args - Arguments to update one CryptoWallet.
     * @example
     * // Update one CryptoWallet
     * const cryptoWallet = await prisma.cryptoWallet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CryptoWalletUpdateArgs>(args: SelectSubset<T, CryptoWalletUpdateArgs<ExtArgs>>): Prisma__CryptoWalletClient<$Result.GetResult<Prisma.$CryptoWalletPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CryptoWallets.
     * @param {CryptoWalletDeleteManyArgs} args - Arguments to filter CryptoWallets to delete.
     * @example
     * // Delete a few CryptoWallets
     * const { count } = await prisma.cryptoWallet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CryptoWalletDeleteManyArgs>(args?: SelectSubset<T, CryptoWalletDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CryptoWallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoWalletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CryptoWallets
     * const cryptoWallet = await prisma.cryptoWallet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CryptoWalletUpdateManyArgs>(args: SelectSubset<T, CryptoWalletUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CryptoWallets and returns the data updated in the database.
     * @param {CryptoWalletUpdateManyAndReturnArgs} args - Arguments to update many CryptoWallets.
     * @example
     * // Update many CryptoWallets
     * const cryptoWallet = await prisma.cryptoWallet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CryptoWallets and only return the `wallet_id`
     * const cryptoWalletWithWallet_idOnly = await prisma.cryptoWallet.updateManyAndReturn({
     *   select: { wallet_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CryptoWalletUpdateManyAndReturnArgs>(args: SelectSubset<T, CryptoWalletUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CryptoWalletPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CryptoWallet.
     * @param {CryptoWalletUpsertArgs} args - Arguments to update or create a CryptoWallet.
     * @example
     * // Update or create a CryptoWallet
     * const cryptoWallet = await prisma.cryptoWallet.upsert({
     *   create: {
     *     // ... data to create a CryptoWallet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CryptoWallet we want to update
     *   }
     * })
     */
    upsert<T extends CryptoWalletUpsertArgs>(args: SelectSubset<T, CryptoWalletUpsertArgs<ExtArgs>>): Prisma__CryptoWalletClient<$Result.GetResult<Prisma.$CryptoWalletPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CryptoWallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoWalletCountArgs} args - Arguments to filter CryptoWallets to count.
     * @example
     * // Count the number of CryptoWallets
     * const count = await prisma.cryptoWallet.count({
     *   where: {
     *     // ... the filter for the CryptoWallets we want to count
     *   }
     * })
    **/
    count<T extends CryptoWalletCountArgs>(
      args?: Subset<T, CryptoWalletCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CryptoWalletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CryptoWallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoWalletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CryptoWalletAggregateArgs>(args: Subset<T, CryptoWalletAggregateArgs>): Prisma.PrismaPromise<GetCryptoWalletAggregateType<T>>

    /**
     * Group by CryptoWallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CryptoWalletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CryptoWalletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CryptoWalletGroupByArgs['orderBy'] }
        : { orderBy?: CryptoWalletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CryptoWalletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCryptoWalletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CryptoWallet model
   */
  readonly fields: CryptoWalletFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CryptoWallet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CryptoWalletClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cryptocurrency<T extends CryptocurrencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CryptocurrencyDefaultArgs<ExtArgs>>): Prisma__CryptocurrencyClient<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CryptoWallet model
   */ 
  interface CryptoWalletFieldRefs {
    readonly wallet_id: FieldRef<"CryptoWallet", 'Int'>
    readonly user_id: FieldRef<"CryptoWallet", 'Int'>
    readonly crypto_id: FieldRef<"CryptoWallet", 'Int'>
    readonly balance: FieldRef<"CryptoWallet", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * CryptoWallet findUnique
   */
  export type CryptoWalletFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletInclude<ExtArgs> | null
    /**
     * Filter, which CryptoWallet to fetch.
     */
    where: CryptoWalletWhereUniqueInput
  }

  /**
   * CryptoWallet findUniqueOrThrow
   */
  export type CryptoWalletFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletInclude<ExtArgs> | null
    /**
     * Filter, which CryptoWallet to fetch.
     */
    where: CryptoWalletWhereUniqueInput
  }

  /**
   * CryptoWallet findFirst
   */
  export type CryptoWalletFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletInclude<ExtArgs> | null
    /**
     * Filter, which CryptoWallet to fetch.
     */
    where?: CryptoWalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CryptoWallets to fetch.
     */
    orderBy?: CryptoWalletOrderByWithRelationInput | CryptoWalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CryptoWallets.
     */
    cursor?: CryptoWalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CryptoWallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CryptoWallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CryptoWallets.
     */
    distinct?: CryptoWalletScalarFieldEnum | CryptoWalletScalarFieldEnum[]
  }

  /**
   * CryptoWallet findFirstOrThrow
   */
  export type CryptoWalletFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletInclude<ExtArgs> | null
    /**
     * Filter, which CryptoWallet to fetch.
     */
    where?: CryptoWalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CryptoWallets to fetch.
     */
    orderBy?: CryptoWalletOrderByWithRelationInput | CryptoWalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CryptoWallets.
     */
    cursor?: CryptoWalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CryptoWallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CryptoWallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CryptoWallets.
     */
    distinct?: CryptoWalletScalarFieldEnum | CryptoWalletScalarFieldEnum[]
  }

  /**
   * CryptoWallet findMany
   */
  export type CryptoWalletFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletInclude<ExtArgs> | null
    /**
     * Filter, which CryptoWallets to fetch.
     */
    where?: CryptoWalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CryptoWallets to fetch.
     */
    orderBy?: CryptoWalletOrderByWithRelationInput | CryptoWalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CryptoWallets.
     */
    cursor?: CryptoWalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CryptoWallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CryptoWallets.
     */
    skip?: number
    distinct?: CryptoWalletScalarFieldEnum | CryptoWalletScalarFieldEnum[]
  }

  /**
   * CryptoWallet create
   */
  export type CryptoWalletCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletInclude<ExtArgs> | null
    /**
     * The data needed to create a CryptoWallet.
     */
    data: XOR<CryptoWalletCreateInput, CryptoWalletUncheckedCreateInput>
  }

  /**
   * CryptoWallet createMany
   */
  export type CryptoWalletCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CryptoWallets.
     */
    data: CryptoWalletCreateManyInput | CryptoWalletCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CryptoWallet createManyAndReturn
   */
  export type CryptoWalletCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * The data used to create many CryptoWallets.
     */
    data: CryptoWalletCreateManyInput | CryptoWalletCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CryptoWallet update
   */
  export type CryptoWalletUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletInclude<ExtArgs> | null
    /**
     * The data needed to update a CryptoWallet.
     */
    data: XOR<CryptoWalletUpdateInput, CryptoWalletUncheckedUpdateInput>
    /**
     * Choose, which CryptoWallet to update.
     */
    where: CryptoWalletWhereUniqueInput
  }

  /**
   * CryptoWallet updateMany
   */
  export type CryptoWalletUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CryptoWallets.
     */
    data: XOR<CryptoWalletUpdateManyMutationInput, CryptoWalletUncheckedUpdateManyInput>
    /**
     * Filter which CryptoWallets to update
     */
    where?: CryptoWalletWhereInput
    /**
     * Limit how many CryptoWallets to update.
     */
    limit?: number
  }

  /**
   * CryptoWallet updateManyAndReturn
   */
  export type CryptoWalletUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * The data used to update CryptoWallets.
     */
    data: XOR<CryptoWalletUpdateManyMutationInput, CryptoWalletUncheckedUpdateManyInput>
    /**
     * Filter which CryptoWallets to update
     */
    where?: CryptoWalletWhereInput
    /**
     * Limit how many CryptoWallets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CryptoWallet upsert
   */
  export type CryptoWalletUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletInclude<ExtArgs> | null
    /**
     * The filter to search for the CryptoWallet to update in case it exists.
     */
    where: CryptoWalletWhereUniqueInput
    /**
     * In case the CryptoWallet found by the `where` argument doesn't exist, create a new CryptoWallet with this data.
     */
    create: XOR<CryptoWalletCreateInput, CryptoWalletUncheckedCreateInput>
    /**
     * In case the CryptoWallet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CryptoWalletUpdateInput, CryptoWalletUncheckedUpdateInput>
  }

  /**
   * CryptoWallet delete
   */
  export type CryptoWalletDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletInclude<ExtArgs> | null
    /**
     * Filter which CryptoWallet to delete.
     */
    where: CryptoWalletWhereUniqueInput
  }

  /**
   * CryptoWallet deleteMany
   */
  export type CryptoWalletDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CryptoWallets to delete
     */
    where?: CryptoWalletWhereInput
    /**
     * Limit how many CryptoWallets to delete.
     */
    limit?: number
  }

  /**
   * CryptoWallet without action
   */
  export type CryptoWalletDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CryptoWallet
     */
    select?: CryptoWalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CryptoWallet
     */
    omit?: CryptoWalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CryptoWalletInclude<ExtArgs> | null
  }


  /**
   * Model FiatTransaction
   */

  export type AggregateFiatTransaction = {
    _count: FiatTransactionCountAggregateOutputType | null
    _avg: FiatTransactionAvgAggregateOutputType | null
    _sum: FiatTransactionSumAggregateOutputType | null
    _min: FiatTransactionMinAggregateOutputType | null
    _max: FiatTransactionMaxAggregateOutputType | null
  }

  export type FiatTransactionAvgAggregateOutputType = {
    fiat_transaction_id: number | null
    user_id: number | null
    amount: number | null
  }

  export type FiatTransactionSumAggregateOutputType = {
    fiat_transaction_id: number | null
    user_id: number | null
    amount: number | null
  }

  export type FiatTransactionMinAggregateOutputType = {
    fiat_transaction_id: number | null
    user_id: number | null
    amount: number | null
    fiat_type: string | null
    transaction_type: string | null
    transaction_date: Date | null
  }

  export type FiatTransactionMaxAggregateOutputType = {
    fiat_transaction_id: number | null
    user_id: number | null
    amount: number | null
    fiat_type: string | null
    transaction_type: string | null
    transaction_date: Date | null
  }

  export type FiatTransactionCountAggregateOutputType = {
    fiat_transaction_id: number
    user_id: number
    amount: number
    fiat_type: number
    transaction_type: number
    transaction_date: number
    _all: number
  }


  export type FiatTransactionAvgAggregateInputType = {
    fiat_transaction_id?: true
    user_id?: true
    amount?: true
  }

  export type FiatTransactionSumAggregateInputType = {
    fiat_transaction_id?: true
    user_id?: true
    amount?: true
  }

  export type FiatTransactionMinAggregateInputType = {
    fiat_transaction_id?: true
    user_id?: true
    amount?: true
    fiat_type?: true
    transaction_type?: true
    transaction_date?: true
  }

  export type FiatTransactionMaxAggregateInputType = {
    fiat_transaction_id?: true
    user_id?: true
    amount?: true
    fiat_type?: true
    transaction_type?: true
    transaction_date?: true
  }

  export type FiatTransactionCountAggregateInputType = {
    fiat_transaction_id?: true
    user_id?: true
    amount?: true
    fiat_type?: true
    transaction_type?: true
    transaction_date?: true
    _all?: true
  }

  export type FiatTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FiatTransaction to aggregate.
     */
    where?: FiatTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FiatTransactions to fetch.
     */
    orderBy?: FiatTransactionOrderByWithRelationInput | FiatTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FiatTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FiatTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FiatTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FiatTransactions
    **/
    _count?: true | FiatTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FiatTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FiatTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FiatTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FiatTransactionMaxAggregateInputType
  }

  export type GetFiatTransactionAggregateType<T extends FiatTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateFiatTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFiatTransaction[P]>
      : GetScalarType<T[P], AggregateFiatTransaction[P]>
  }




  export type FiatTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FiatTransactionWhereInput
    orderBy?: FiatTransactionOrderByWithAggregationInput | FiatTransactionOrderByWithAggregationInput[]
    by: FiatTransactionScalarFieldEnum[] | FiatTransactionScalarFieldEnum
    having?: FiatTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FiatTransactionCountAggregateInputType | true
    _avg?: FiatTransactionAvgAggregateInputType
    _sum?: FiatTransactionSumAggregateInputType
    _min?: FiatTransactionMinAggregateInputType
    _max?: FiatTransactionMaxAggregateInputType
  }

  export type FiatTransactionGroupByOutputType = {
    fiat_transaction_id: number
    user_id: number
    amount: number
    fiat_type: string
    transaction_type: string
    transaction_date: Date
    _count: FiatTransactionCountAggregateOutputType | null
    _avg: FiatTransactionAvgAggregateOutputType | null
    _sum: FiatTransactionSumAggregateOutputType | null
    _min: FiatTransactionMinAggregateOutputType | null
    _max: FiatTransactionMaxAggregateOutputType | null
  }

  type GetFiatTransactionGroupByPayload<T extends FiatTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FiatTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FiatTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FiatTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], FiatTransactionGroupByOutputType[P]>
        }
      >
    >


  export type FiatTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    fiat_transaction_id?: boolean
    user_id?: boolean
    amount?: boolean
    fiat_type?: boolean
    transaction_type?: boolean
    transaction_date?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fiatTransaction"]>

  export type FiatTransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    fiat_transaction_id?: boolean
    user_id?: boolean
    amount?: boolean
    fiat_type?: boolean
    transaction_type?: boolean
    transaction_date?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fiatTransaction"]>

  export type FiatTransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    fiat_transaction_id?: boolean
    user_id?: boolean
    amount?: boolean
    fiat_type?: boolean
    transaction_type?: boolean
    transaction_date?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fiatTransaction"]>

  export type FiatTransactionSelectScalar = {
    fiat_transaction_id?: boolean
    user_id?: boolean
    amount?: boolean
    fiat_type?: boolean
    transaction_type?: boolean
    transaction_date?: boolean
  }

  export type FiatTransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"fiat_transaction_id" | "user_id" | "amount" | "fiat_type" | "transaction_type" | "transaction_date", ExtArgs["result"]["fiatTransaction"]>
  export type FiatTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FiatTransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FiatTransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FiatTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FiatTransaction"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      fiat_transaction_id: number
      user_id: number
      amount: number
      fiat_type: string
      transaction_type: string
      transaction_date: Date
    }, ExtArgs["result"]["fiatTransaction"]>
    composites: {}
  }

  type FiatTransactionGetPayload<S extends boolean | null | undefined | FiatTransactionDefaultArgs> = $Result.GetResult<Prisma.$FiatTransactionPayload, S>

  type FiatTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FiatTransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FiatTransactionCountAggregateInputType | true
    }

  export interface FiatTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FiatTransaction'], meta: { name: 'FiatTransaction' } }
    /**
     * Find zero or one FiatTransaction that matches the filter.
     * @param {FiatTransactionFindUniqueArgs} args - Arguments to find a FiatTransaction
     * @example
     * // Get one FiatTransaction
     * const fiatTransaction = await prisma.fiatTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FiatTransactionFindUniqueArgs>(args: SelectSubset<T, FiatTransactionFindUniqueArgs<ExtArgs>>): Prisma__FiatTransactionClient<$Result.GetResult<Prisma.$FiatTransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FiatTransaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FiatTransactionFindUniqueOrThrowArgs} args - Arguments to find a FiatTransaction
     * @example
     * // Get one FiatTransaction
     * const fiatTransaction = await prisma.fiatTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FiatTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, FiatTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FiatTransactionClient<$Result.GetResult<Prisma.$FiatTransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FiatTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiatTransactionFindFirstArgs} args - Arguments to find a FiatTransaction
     * @example
     * // Get one FiatTransaction
     * const fiatTransaction = await prisma.fiatTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FiatTransactionFindFirstArgs>(args?: SelectSubset<T, FiatTransactionFindFirstArgs<ExtArgs>>): Prisma__FiatTransactionClient<$Result.GetResult<Prisma.$FiatTransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FiatTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiatTransactionFindFirstOrThrowArgs} args - Arguments to find a FiatTransaction
     * @example
     * // Get one FiatTransaction
     * const fiatTransaction = await prisma.fiatTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FiatTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, FiatTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__FiatTransactionClient<$Result.GetResult<Prisma.$FiatTransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FiatTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiatTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FiatTransactions
     * const fiatTransactions = await prisma.fiatTransaction.findMany()
     * 
     * // Get first 10 FiatTransactions
     * const fiatTransactions = await prisma.fiatTransaction.findMany({ take: 10 })
     * 
     * // Only select the `fiat_transaction_id`
     * const fiatTransactionWithFiat_transaction_idOnly = await prisma.fiatTransaction.findMany({ select: { fiat_transaction_id: true } })
     * 
     */
    findMany<T extends FiatTransactionFindManyArgs>(args?: SelectSubset<T, FiatTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FiatTransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FiatTransaction.
     * @param {FiatTransactionCreateArgs} args - Arguments to create a FiatTransaction.
     * @example
     * // Create one FiatTransaction
     * const FiatTransaction = await prisma.fiatTransaction.create({
     *   data: {
     *     // ... data to create a FiatTransaction
     *   }
     * })
     * 
     */
    create<T extends FiatTransactionCreateArgs>(args: SelectSubset<T, FiatTransactionCreateArgs<ExtArgs>>): Prisma__FiatTransactionClient<$Result.GetResult<Prisma.$FiatTransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FiatTransactions.
     * @param {FiatTransactionCreateManyArgs} args - Arguments to create many FiatTransactions.
     * @example
     * // Create many FiatTransactions
     * const fiatTransaction = await prisma.fiatTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FiatTransactionCreateManyArgs>(args?: SelectSubset<T, FiatTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FiatTransactions and returns the data saved in the database.
     * @param {FiatTransactionCreateManyAndReturnArgs} args - Arguments to create many FiatTransactions.
     * @example
     * // Create many FiatTransactions
     * const fiatTransaction = await prisma.fiatTransaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FiatTransactions and only return the `fiat_transaction_id`
     * const fiatTransactionWithFiat_transaction_idOnly = await prisma.fiatTransaction.createManyAndReturn({
     *   select: { fiat_transaction_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FiatTransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, FiatTransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FiatTransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FiatTransaction.
     * @param {FiatTransactionDeleteArgs} args - Arguments to delete one FiatTransaction.
     * @example
     * // Delete one FiatTransaction
     * const FiatTransaction = await prisma.fiatTransaction.delete({
     *   where: {
     *     // ... filter to delete one FiatTransaction
     *   }
     * })
     * 
     */
    delete<T extends FiatTransactionDeleteArgs>(args: SelectSubset<T, FiatTransactionDeleteArgs<ExtArgs>>): Prisma__FiatTransactionClient<$Result.GetResult<Prisma.$FiatTransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FiatTransaction.
     * @param {FiatTransactionUpdateArgs} args - Arguments to update one FiatTransaction.
     * @example
     * // Update one FiatTransaction
     * const fiatTransaction = await prisma.fiatTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FiatTransactionUpdateArgs>(args: SelectSubset<T, FiatTransactionUpdateArgs<ExtArgs>>): Prisma__FiatTransactionClient<$Result.GetResult<Prisma.$FiatTransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FiatTransactions.
     * @param {FiatTransactionDeleteManyArgs} args - Arguments to filter FiatTransactions to delete.
     * @example
     * // Delete a few FiatTransactions
     * const { count } = await prisma.fiatTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FiatTransactionDeleteManyArgs>(args?: SelectSubset<T, FiatTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FiatTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiatTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FiatTransactions
     * const fiatTransaction = await prisma.fiatTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FiatTransactionUpdateManyArgs>(args: SelectSubset<T, FiatTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FiatTransactions and returns the data updated in the database.
     * @param {FiatTransactionUpdateManyAndReturnArgs} args - Arguments to update many FiatTransactions.
     * @example
     * // Update many FiatTransactions
     * const fiatTransaction = await prisma.fiatTransaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FiatTransactions and only return the `fiat_transaction_id`
     * const fiatTransactionWithFiat_transaction_idOnly = await prisma.fiatTransaction.updateManyAndReturn({
     *   select: { fiat_transaction_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FiatTransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, FiatTransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FiatTransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FiatTransaction.
     * @param {FiatTransactionUpsertArgs} args - Arguments to update or create a FiatTransaction.
     * @example
     * // Update or create a FiatTransaction
     * const fiatTransaction = await prisma.fiatTransaction.upsert({
     *   create: {
     *     // ... data to create a FiatTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FiatTransaction we want to update
     *   }
     * })
     */
    upsert<T extends FiatTransactionUpsertArgs>(args: SelectSubset<T, FiatTransactionUpsertArgs<ExtArgs>>): Prisma__FiatTransactionClient<$Result.GetResult<Prisma.$FiatTransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FiatTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiatTransactionCountArgs} args - Arguments to filter FiatTransactions to count.
     * @example
     * // Count the number of FiatTransactions
     * const count = await prisma.fiatTransaction.count({
     *   where: {
     *     // ... the filter for the FiatTransactions we want to count
     *   }
     * })
    **/
    count<T extends FiatTransactionCountArgs>(
      args?: Subset<T, FiatTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FiatTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FiatTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiatTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FiatTransactionAggregateArgs>(args: Subset<T, FiatTransactionAggregateArgs>): Prisma.PrismaPromise<GetFiatTransactionAggregateType<T>>

    /**
     * Group by FiatTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FiatTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FiatTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FiatTransactionGroupByArgs['orderBy'] }
        : { orderBy?: FiatTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FiatTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFiatTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FiatTransaction model
   */
  readonly fields: FiatTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FiatTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FiatTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FiatTransaction model
   */ 
  interface FiatTransactionFieldRefs {
    readonly fiat_transaction_id: FieldRef<"FiatTransaction", 'Int'>
    readonly user_id: FieldRef<"FiatTransaction", 'Int'>
    readonly amount: FieldRef<"FiatTransaction", 'Float'>
    readonly fiat_type: FieldRef<"FiatTransaction", 'String'>
    readonly transaction_type: FieldRef<"FiatTransaction", 'String'>
    readonly transaction_date: FieldRef<"FiatTransaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * FiatTransaction findUnique
   */
  export type FiatTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiatTransaction
     */
    select?: FiatTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FiatTransaction
     */
    omit?: FiatTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FiatTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FiatTransaction to fetch.
     */
    where: FiatTransactionWhereUniqueInput
  }

  /**
   * FiatTransaction findUniqueOrThrow
   */
  export type FiatTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiatTransaction
     */
    select?: FiatTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FiatTransaction
     */
    omit?: FiatTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FiatTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FiatTransaction to fetch.
     */
    where: FiatTransactionWhereUniqueInput
  }

  /**
   * FiatTransaction findFirst
   */
  export type FiatTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiatTransaction
     */
    select?: FiatTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FiatTransaction
     */
    omit?: FiatTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FiatTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FiatTransaction to fetch.
     */
    where?: FiatTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FiatTransactions to fetch.
     */
    orderBy?: FiatTransactionOrderByWithRelationInput | FiatTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FiatTransactions.
     */
    cursor?: FiatTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FiatTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FiatTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FiatTransactions.
     */
    distinct?: FiatTransactionScalarFieldEnum | FiatTransactionScalarFieldEnum[]
  }

  /**
   * FiatTransaction findFirstOrThrow
   */
  export type FiatTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiatTransaction
     */
    select?: FiatTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FiatTransaction
     */
    omit?: FiatTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FiatTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FiatTransaction to fetch.
     */
    where?: FiatTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FiatTransactions to fetch.
     */
    orderBy?: FiatTransactionOrderByWithRelationInput | FiatTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FiatTransactions.
     */
    cursor?: FiatTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FiatTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FiatTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FiatTransactions.
     */
    distinct?: FiatTransactionScalarFieldEnum | FiatTransactionScalarFieldEnum[]
  }

  /**
   * FiatTransaction findMany
   */
  export type FiatTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiatTransaction
     */
    select?: FiatTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FiatTransaction
     */
    omit?: FiatTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FiatTransactionInclude<ExtArgs> | null
    /**
     * Filter, which FiatTransactions to fetch.
     */
    where?: FiatTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FiatTransactions to fetch.
     */
    orderBy?: FiatTransactionOrderByWithRelationInput | FiatTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FiatTransactions.
     */
    cursor?: FiatTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FiatTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FiatTransactions.
     */
    skip?: number
    distinct?: FiatTransactionScalarFieldEnum | FiatTransactionScalarFieldEnum[]
  }

  /**
   * FiatTransaction create
   */
  export type FiatTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiatTransaction
     */
    select?: FiatTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FiatTransaction
     */
    omit?: FiatTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FiatTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a FiatTransaction.
     */
    data: XOR<FiatTransactionCreateInput, FiatTransactionUncheckedCreateInput>
  }

  /**
   * FiatTransaction createMany
   */
  export type FiatTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FiatTransactions.
     */
    data: FiatTransactionCreateManyInput | FiatTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FiatTransaction createManyAndReturn
   */
  export type FiatTransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiatTransaction
     */
    select?: FiatTransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FiatTransaction
     */
    omit?: FiatTransactionOmit<ExtArgs> | null
    /**
     * The data used to create many FiatTransactions.
     */
    data: FiatTransactionCreateManyInput | FiatTransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FiatTransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FiatTransaction update
   */
  export type FiatTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiatTransaction
     */
    select?: FiatTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FiatTransaction
     */
    omit?: FiatTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FiatTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a FiatTransaction.
     */
    data: XOR<FiatTransactionUpdateInput, FiatTransactionUncheckedUpdateInput>
    /**
     * Choose, which FiatTransaction to update.
     */
    where: FiatTransactionWhereUniqueInput
  }

  /**
   * FiatTransaction updateMany
   */
  export type FiatTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FiatTransactions.
     */
    data: XOR<FiatTransactionUpdateManyMutationInput, FiatTransactionUncheckedUpdateManyInput>
    /**
     * Filter which FiatTransactions to update
     */
    where?: FiatTransactionWhereInput
    /**
     * Limit how many FiatTransactions to update.
     */
    limit?: number
  }

  /**
   * FiatTransaction updateManyAndReturn
   */
  export type FiatTransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiatTransaction
     */
    select?: FiatTransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FiatTransaction
     */
    omit?: FiatTransactionOmit<ExtArgs> | null
    /**
     * The data used to update FiatTransactions.
     */
    data: XOR<FiatTransactionUpdateManyMutationInput, FiatTransactionUncheckedUpdateManyInput>
    /**
     * Filter which FiatTransactions to update
     */
    where?: FiatTransactionWhereInput
    /**
     * Limit how many FiatTransactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FiatTransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FiatTransaction upsert
   */
  export type FiatTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiatTransaction
     */
    select?: FiatTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FiatTransaction
     */
    omit?: FiatTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FiatTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the FiatTransaction to update in case it exists.
     */
    where: FiatTransactionWhereUniqueInput
    /**
     * In case the FiatTransaction found by the `where` argument doesn't exist, create a new FiatTransaction with this data.
     */
    create: XOR<FiatTransactionCreateInput, FiatTransactionUncheckedCreateInput>
    /**
     * In case the FiatTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FiatTransactionUpdateInput, FiatTransactionUncheckedUpdateInput>
  }

  /**
   * FiatTransaction delete
   */
  export type FiatTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiatTransaction
     */
    select?: FiatTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FiatTransaction
     */
    omit?: FiatTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FiatTransactionInclude<ExtArgs> | null
    /**
     * Filter which FiatTransaction to delete.
     */
    where: FiatTransactionWhereUniqueInput
  }

  /**
   * FiatTransaction deleteMany
   */
  export type FiatTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FiatTransactions to delete
     */
    where?: FiatTransactionWhereInput
    /**
     * Limit how many FiatTransactions to delete.
     */
    limit?: number
  }

  /**
   * FiatTransaction without action
   */
  export type FiatTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FiatTransaction
     */
    select?: FiatTransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FiatTransaction
     */
    omit?: FiatTransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FiatTransactionInclude<ExtArgs> | null
  }


  /**
   * Model BuyOrder
   */

  export type AggregateBuyOrder = {
    _count: BuyOrderCountAggregateOutputType | null
    _avg: BuyOrderAvgAggregateOutputType | null
    _sum: BuyOrderSumAggregateOutputType | null
    _min: BuyOrderMinAggregateOutputType | null
    _max: BuyOrderMaxAggregateOutputType | null
  }

  export type BuyOrderAvgAggregateOutputType = {
    buy_order_id: number | null
    user_id: number | null
    crypto_id: number | null
    amount: number | null
    fiat_amount: number | null
  }

  export type BuyOrderSumAggregateOutputType = {
    buy_order_id: number | null
    user_id: number | null
    crypto_id: number | null
    amount: number | null
    fiat_amount: number | null
  }

  export type BuyOrderMinAggregateOutputType = {
    buy_order_id: number | null
    user_id: number | null
    crypto_id: number | null
    amount: number | null
    fiat_amount: number | null
    status: string | null
    timestamp: Date | null
  }

  export type BuyOrderMaxAggregateOutputType = {
    buy_order_id: number | null
    user_id: number | null
    crypto_id: number | null
    amount: number | null
    fiat_amount: number | null
    status: string | null
    timestamp: Date | null
  }

  export type BuyOrderCountAggregateOutputType = {
    buy_order_id: number
    user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status: number
    timestamp: number
    _all: number
  }


  export type BuyOrderAvgAggregateInputType = {
    buy_order_id?: true
    user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
  }

  export type BuyOrderSumAggregateInputType = {
    buy_order_id?: true
    user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
  }

  export type BuyOrderMinAggregateInputType = {
    buy_order_id?: true
    user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
    status?: true
    timestamp?: true
  }

  export type BuyOrderMaxAggregateInputType = {
    buy_order_id?: true
    user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
    status?: true
    timestamp?: true
  }

  export type BuyOrderCountAggregateInputType = {
    buy_order_id?: true
    user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
    status?: true
    timestamp?: true
    _all?: true
  }

  export type BuyOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuyOrder to aggregate.
     */
    where?: BuyOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyOrders to fetch.
     */
    orderBy?: BuyOrderOrderByWithRelationInput | BuyOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BuyOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BuyOrders
    **/
    _count?: true | BuyOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BuyOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BuyOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BuyOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BuyOrderMaxAggregateInputType
  }

  export type GetBuyOrderAggregateType<T extends BuyOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateBuyOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBuyOrder[P]>
      : GetScalarType<T[P], AggregateBuyOrder[P]>
  }




  export type BuyOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BuyOrderWhereInput
    orderBy?: BuyOrderOrderByWithAggregationInput | BuyOrderOrderByWithAggregationInput[]
    by: BuyOrderScalarFieldEnum[] | BuyOrderScalarFieldEnum
    having?: BuyOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BuyOrderCountAggregateInputType | true
    _avg?: BuyOrderAvgAggregateInputType
    _sum?: BuyOrderSumAggregateInputType
    _min?: BuyOrderMinAggregateInputType
    _max?: BuyOrderMaxAggregateInputType
  }

  export type BuyOrderGroupByOutputType = {
    buy_order_id: number
    user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status: string
    timestamp: Date
    _count: BuyOrderCountAggregateOutputType | null
    _avg: BuyOrderAvgAggregateOutputType | null
    _sum: BuyOrderSumAggregateOutputType | null
    _min: BuyOrderMinAggregateOutputType | null
    _max: BuyOrderMaxAggregateOutputType | null
  }

  type GetBuyOrderGroupByPayload<T extends BuyOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BuyOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BuyOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BuyOrderGroupByOutputType[P]>
            : GetScalarType<T[P], BuyOrderGroupByOutputType[P]>
        }
      >
    >


  export type BuyOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    buy_order_id?: boolean
    user_id?: boolean
    crypto_id?: boolean
    amount?: boolean
    fiat_amount?: boolean
    status?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyOrder"]>

  export type BuyOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    buy_order_id?: boolean
    user_id?: boolean
    crypto_id?: boolean
    amount?: boolean
    fiat_amount?: boolean
    status?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyOrder"]>

  export type BuyOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    buy_order_id?: boolean
    user_id?: boolean
    crypto_id?: boolean
    amount?: boolean
    fiat_amount?: boolean
    status?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["buyOrder"]>

  export type BuyOrderSelectScalar = {
    buy_order_id?: boolean
    user_id?: boolean
    crypto_id?: boolean
    amount?: boolean
    fiat_amount?: boolean
    status?: boolean
    timestamp?: boolean
  }

  export type BuyOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"buy_order_id" | "user_id" | "crypto_id" | "amount" | "fiat_amount" | "status" | "timestamp", ExtArgs["result"]["buyOrder"]>
  export type BuyOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }
  export type BuyOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }
  export type BuyOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }

  export type $BuyOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BuyOrder"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      cryptocurrency: Prisma.$CryptocurrencyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      buy_order_id: number
      user_id: number
      crypto_id: number
      amount: number
      fiat_amount: number
      status: string
      timestamp: Date
    }, ExtArgs["result"]["buyOrder"]>
    composites: {}
  }

  type BuyOrderGetPayload<S extends boolean | null | undefined | BuyOrderDefaultArgs> = $Result.GetResult<Prisma.$BuyOrderPayload, S>

  type BuyOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BuyOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BuyOrderCountAggregateInputType | true
    }

  export interface BuyOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BuyOrder'], meta: { name: 'BuyOrder' } }
    /**
     * Find zero or one BuyOrder that matches the filter.
     * @param {BuyOrderFindUniqueArgs} args - Arguments to find a BuyOrder
     * @example
     * // Get one BuyOrder
     * const buyOrder = await prisma.buyOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BuyOrderFindUniqueArgs>(args: SelectSubset<T, BuyOrderFindUniqueArgs<ExtArgs>>): Prisma__BuyOrderClient<$Result.GetResult<Prisma.$BuyOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BuyOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BuyOrderFindUniqueOrThrowArgs} args - Arguments to find a BuyOrder
     * @example
     * // Get one BuyOrder
     * const buyOrder = await prisma.buyOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BuyOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, BuyOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BuyOrderClient<$Result.GetResult<Prisma.$BuyOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuyOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyOrderFindFirstArgs} args - Arguments to find a BuyOrder
     * @example
     * // Get one BuyOrder
     * const buyOrder = await prisma.buyOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BuyOrderFindFirstArgs>(args?: SelectSubset<T, BuyOrderFindFirstArgs<ExtArgs>>): Prisma__BuyOrderClient<$Result.GetResult<Prisma.$BuyOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BuyOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyOrderFindFirstOrThrowArgs} args - Arguments to find a BuyOrder
     * @example
     * // Get one BuyOrder
     * const buyOrder = await prisma.buyOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BuyOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, BuyOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__BuyOrderClient<$Result.GetResult<Prisma.$BuyOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BuyOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BuyOrders
     * const buyOrders = await prisma.buyOrder.findMany()
     * 
     * // Get first 10 BuyOrders
     * const buyOrders = await prisma.buyOrder.findMany({ take: 10 })
     * 
     * // Only select the `buy_order_id`
     * const buyOrderWithBuy_order_idOnly = await prisma.buyOrder.findMany({ select: { buy_order_id: true } })
     * 
     */
    findMany<T extends BuyOrderFindManyArgs>(args?: SelectSubset<T, BuyOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BuyOrder.
     * @param {BuyOrderCreateArgs} args - Arguments to create a BuyOrder.
     * @example
     * // Create one BuyOrder
     * const BuyOrder = await prisma.buyOrder.create({
     *   data: {
     *     // ... data to create a BuyOrder
     *   }
     * })
     * 
     */
    create<T extends BuyOrderCreateArgs>(args: SelectSubset<T, BuyOrderCreateArgs<ExtArgs>>): Prisma__BuyOrderClient<$Result.GetResult<Prisma.$BuyOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BuyOrders.
     * @param {BuyOrderCreateManyArgs} args - Arguments to create many BuyOrders.
     * @example
     * // Create many BuyOrders
     * const buyOrder = await prisma.buyOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BuyOrderCreateManyArgs>(args?: SelectSubset<T, BuyOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BuyOrders and returns the data saved in the database.
     * @param {BuyOrderCreateManyAndReturnArgs} args - Arguments to create many BuyOrders.
     * @example
     * // Create many BuyOrders
     * const buyOrder = await prisma.buyOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BuyOrders and only return the `buy_order_id`
     * const buyOrderWithBuy_order_idOnly = await prisma.buyOrder.createManyAndReturn({
     *   select: { buy_order_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BuyOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, BuyOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BuyOrder.
     * @param {BuyOrderDeleteArgs} args - Arguments to delete one BuyOrder.
     * @example
     * // Delete one BuyOrder
     * const BuyOrder = await prisma.buyOrder.delete({
     *   where: {
     *     // ... filter to delete one BuyOrder
     *   }
     * })
     * 
     */
    delete<T extends BuyOrderDeleteArgs>(args: SelectSubset<T, BuyOrderDeleteArgs<ExtArgs>>): Prisma__BuyOrderClient<$Result.GetResult<Prisma.$BuyOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BuyOrder.
     * @param {BuyOrderUpdateArgs} args - Arguments to update one BuyOrder.
     * @example
     * // Update one BuyOrder
     * const buyOrder = await prisma.buyOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BuyOrderUpdateArgs>(args: SelectSubset<T, BuyOrderUpdateArgs<ExtArgs>>): Prisma__BuyOrderClient<$Result.GetResult<Prisma.$BuyOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BuyOrders.
     * @param {BuyOrderDeleteManyArgs} args - Arguments to filter BuyOrders to delete.
     * @example
     * // Delete a few BuyOrders
     * const { count } = await prisma.buyOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BuyOrderDeleteManyArgs>(args?: SelectSubset<T, BuyOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BuyOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BuyOrders
     * const buyOrder = await prisma.buyOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BuyOrderUpdateManyArgs>(args: SelectSubset<T, BuyOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BuyOrders and returns the data updated in the database.
     * @param {BuyOrderUpdateManyAndReturnArgs} args - Arguments to update many BuyOrders.
     * @example
     * // Update many BuyOrders
     * const buyOrder = await prisma.buyOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BuyOrders and only return the `buy_order_id`
     * const buyOrderWithBuy_order_idOnly = await prisma.buyOrder.updateManyAndReturn({
     *   select: { buy_order_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BuyOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, BuyOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BuyOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BuyOrder.
     * @param {BuyOrderUpsertArgs} args - Arguments to update or create a BuyOrder.
     * @example
     * // Update or create a BuyOrder
     * const buyOrder = await prisma.buyOrder.upsert({
     *   create: {
     *     // ... data to create a BuyOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BuyOrder we want to update
     *   }
     * })
     */
    upsert<T extends BuyOrderUpsertArgs>(args: SelectSubset<T, BuyOrderUpsertArgs<ExtArgs>>): Prisma__BuyOrderClient<$Result.GetResult<Prisma.$BuyOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BuyOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyOrderCountArgs} args - Arguments to filter BuyOrders to count.
     * @example
     * // Count the number of BuyOrders
     * const count = await prisma.buyOrder.count({
     *   where: {
     *     // ... the filter for the BuyOrders we want to count
     *   }
     * })
    **/
    count<T extends BuyOrderCountArgs>(
      args?: Subset<T, BuyOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BuyOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BuyOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BuyOrderAggregateArgs>(args: Subset<T, BuyOrderAggregateArgs>): Prisma.PrismaPromise<GetBuyOrderAggregateType<T>>

    /**
     * Group by BuyOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BuyOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BuyOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BuyOrderGroupByArgs['orderBy'] }
        : { orderBy?: BuyOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BuyOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBuyOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BuyOrder model
   */
  readonly fields: BuyOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BuyOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BuyOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cryptocurrency<T extends CryptocurrencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CryptocurrencyDefaultArgs<ExtArgs>>): Prisma__CryptocurrencyClient<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BuyOrder model
   */ 
  interface BuyOrderFieldRefs {
    readonly buy_order_id: FieldRef<"BuyOrder", 'Int'>
    readonly user_id: FieldRef<"BuyOrder", 'Int'>
    readonly crypto_id: FieldRef<"BuyOrder", 'Int'>
    readonly amount: FieldRef<"BuyOrder", 'Float'>
    readonly fiat_amount: FieldRef<"BuyOrder", 'Float'>
    readonly status: FieldRef<"BuyOrder", 'String'>
    readonly timestamp: FieldRef<"BuyOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BuyOrder findUnique
   */
  export type BuyOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderInclude<ExtArgs> | null
    /**
     * Filter, which BuyOrder to fetch.
     */
    where: BuyOrderWhereUniqueInput
  }

  /**
   * BuyOrder findUniqueOrThrow
   */
  export type BuyOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderInclude<ExtArgs> | null
    /**
     * Filter, which BuyOrder to fetch.
     */
    where: BuyOrderWhereUniqueInput
  }

  /**
   * BuyOrder findFirst
   */
  export type BuyOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderInclude<ExtArgs> | null
    /**
     * Filter, which BuyOrder to fetch.
     */
    where?: BuyOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyOrders to fetch.
     */
    orderBy?: BuyOrderOrderByWithRelationInput | BuyOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuyOrders.
     */
    cursor?: BuyOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuyOrders.
     */
    distinct?: BuyOrderScalarFieldEnum | BuyOrderScalarFieldEnum[]
  }

  /**
   * BuyOrder findFirstOrThrow
   */
  export type BuyOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderInclude<ExtArgs> | null
    /**
     * Filter, which BuyOrder to fetch.
     */
    where?: BuyOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyOrders to fetch.
     */
    orderBy?: BuyOrderOrderByWithRelationInput | BuyOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BuyOrders.
     */
    cursor?: BuyOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BuyOrders.
     */
    distinct?: BuyOrderScalarFieldEnum | BuyOrderScalarFieldEnum[]
  }

  /**
   * BuyOrder findMany
   */
  export type BuyOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderInclude<ExtArgs> | null
    /**
     * Filter, which BuyOrders to fetch.
     */
    where?: BuyOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BuyOrders to fetch.
     */
    orderBy?: BuyOrderOrderByWithRelationInput | BuyOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BuyOrders.
     */
    cursor?: BuyOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BuyOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BuyOrders.
     */
    skip?: number
    distinct?: BuyOrderScalarFieldEnum | BuyOrderScalarFieldEnum[]
  }

  /**
   * BuyOrder create
   */
  export type BuyOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a BuyOrder.
     */
    data: XOR<BuyOrderCreateInput, BuyOrderUncheckedCreateInput>
  }

  /**
   * BuyOrder createMany
   */
  export type BuyOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BuyOrders.
     */
    data: BuyOrderCreateManyInput | BuyOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BuyOrder createManyAndReturn
   */
  export type BuyOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * The data used to create many BuyOrders.
     */
    data: BuyOrderCreateManyInput | BuyOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BuyOrder update
   */
  export type BuyOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a BuyOrder.
     */
    data: XOR<BuyOrderUpdateInput, BuyOrderUncheckedUpdateInput>
    /**
     * Choose, which BuyOrder to update.
     */
    where: BuyOrderWhereUniqueInput
  }

  /**
   * BuyOrder updateMany
   */
  export type BuyOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BuyOrders.
     */
    data: XOR<BuyOrderUpdateManyMutationInput, BuyOrderUncheckedUpdateManyInput>
    /**
     * Filter which BuyOrders to update
     */
    where?: BuyOrderWhereInput
    /**
     * Limit how many BuyOrders to update.
     */
    limit?: number
  }

  /**
   * BuyOrder updateManyAndReturn
   */
  export type BuyOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * The data used to update BuyOrders.
     */
    data: XOR<BuyOrderUpdateManyMutationInput, BuyOrderUncheckedUpdateManyInput>
    /**
     * Filter which BuyOrders to update
     */
    where?: BuyOrderWhereInput
    /**
     * Limit how many BuyOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BuyOrder upsert
   */
  export type BuyOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the BuyOrder to update in case it exists.
     */
    where: BuyOrderWhereUniqueInput
    /**
     * In case the BuyOrder found by the `where` argument doesn't exist, create a new BuyOrder with this data.
     */
    create: XOR<BuyOrderCreateInput, BuyOrderUncheckedCreateInput>
    /**
     * In case the BuyOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BuyOrderUpdateInput, BuyOrderUncheckedUpdateInput>
  }

  /**
   * BuyOrder delete
   */
  export type BuyOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderInclude<ExtArgs> | null
    /**
     * Filter which BuyOrder to delete.
     */
    where: BuyOrderWhereUniqueInput
  }

  /**
   * BuyOrder deleteMany
   */
  export type BuyOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BuyOrders to delete
     */
    where?: BuyOrderWhereInput
    /**
     * Limit how many BuyOrders to delete.
     */
    limit?: number
  }

  /**
   * BuyOrder without action
   */
  export type BuyOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BuyOrder
     */
    select?: BuyOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BuyOrder
     */
    omit?: BuyOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BuyOrderInclude<ExtArgs> | null
  }


  /**
   * Model SellOrder
   */

  export type AggregateSellOrder = {
    _count: SellOrderCountAggregateOutputType | null
    _avg: SellOrderAvgAggregateOutputType | null
    _sum: SellOrderSumAggregateOutputType | null
    _min: SellOrderMinAggregateOutputType | null
    _max: SellOrderMaxAggregateOutputType | null
  }

  export type SellOrderAvgAggregateOutputType = {
    sell_order_id: number | null
    user_id: number | null
    crypto_id: number | null
    amount: number | null
    fiat_amount: number | null
  }

  export type SellOrderSumAggregateOutputType = {
    sell_order_id: number | null
    user_id: number | null
    crypto_id: number | null
    amount: number | null
    fiat_amount: number | null
  }

  export type SellOrderMinAggregateOutputType = {
    sell_order_id: number | null
    user_id: number | null
    crypto_id: number | null
    amount: number | null
    fiat_amount: number | null
    status: string | null
    timestamp: Date | null
  }

  export type SellOrderMaxAggregateOutputType = {
    sell_order_id: number | null
    user_id: number | null
    crypto_id: number | null
    amount: number | null
    fiat_amount: number | null
    status: string | null
    timestamp: Date | null
  }

  export type SellOrderCountAggregateOutputType = {
    sell_order_id: number
    user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status: number
    timestamp: number
    _all: number
  }


  export type SellOrderAvgAggregateInputType = {
    sell_order_id?: true
    user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
  }

  export type SellOrderSumAggregateInputType = {
    sell_order_id?: true
    user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
  }

  export type SellOrderMinAggregateInputType = {
    sell_order_id?: true
    user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
    status?: true
    timestamp?: true
  }

  export type SellOrderMaxAggregateInputType = {
    sell_order_id?: true
    user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
    status?: true
    timestamp?: true
  }

  export type SellOrderCountAggregateInputType = {
    sell_order_id?: true
    user_id?: true
    crypto_id?: true
    amount?: true
    fiat_amount?: true
    status?: true
    timestamp?: true
    _all?: true
  }

  export type SellOrderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SellOrder to aggregate.
     */
    where?: SellOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellOrders to fetch.
     */
    orderBy?: SellOrderOrderByWithRelationInput | SellOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SellOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SellOrders
    **/
    _count?: true | SellOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SellOrderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SellOrderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SellOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SellOrderMaxAggregateInputType
  }

  export type GetSellOrderAggregateType<T extends SellOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateSellOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSellOrder[P]>
      : GetScalarType<T[P], AggregateSellOrder[P]>
  }




  export type SellOrderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SellOrderWhereInput
    orderBy?: SellOrderOrderByWithAggregationInput | SellOrderOrderByWithAggregationInput[]
    by: SellOrderScalarFieldEnum[] | SellOrderScalarFieldEnum
    having?: SellOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SellOrderCountAggregateInputType | true
    _avg?: SellOrderAvgAggregateInputType
    _sum?: SellOrderSumAggregateInputType
    _min?: SellOrderMinAggregateInputType
    _max?: SellOrderMaxAggregateInputType
  }

  export type SellOrderGroupByOutputType = {
    sell_order_id: number
    user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status: string
    timestamp: Date
    _count: SellOrderCountAggregateOutputType | null
    _avg: SellOrderAvgAggregateOutputType | null
    _sum: SellOrderSumAggregateOutputType | null
    _min: SellOrderMinAggregateOutputType | null
    _max: SellOrderMaxAggregateOutputType | null
  }

  type GetSellOrderGroupByPayload<T extends SellOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SellOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SellOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SellOrderGroupByOutputType[P]>
            : GetScalarType<T[P], SellOrderGroupByOutputType[P]>
        }
      >
    >


  export type SellOrderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sell_order_id?: boolean
    user_id?: boolean
    crypto_id?: boolean
    amount?: boolean
    fiat_amount?: boolean
    status?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sellOrder"]>

  export type SellOrderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sell_order_id?: boolean
    user_id?: boolean
    crypto_id?: boolean
    amount?: boolean
    fiat_amount?: boolean
    status?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sellOrder"]>

  export type SellOrderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sell_order_id?: boolean
    user_id?: boolean
    crypto_id?: boolean
    amount?: boolean
    fiat_amount?: boolean
    status?: boolean
    timestamp?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sellOrder"]>

  export type SellOrderSelectScalar = {
    sell_order_id?: boolean
    user_id?: boolean
    crypto_id?: boolean
    amount?: boolean
    fiat_amount?: boolean
    status?: boolean
    timestamp?: boolean
  }

  export type SellOrderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"sell_order_id" | "user_id" | "crypto_id" | "amount" | "fiat_amount" | "status" | "timestamp", ExtArgs["result"]["sellOrder"]>
  export type SellOrderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }
  export type SellOrderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }
  export type SellOrderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    cryptocurrency?: boolean | CryptocurrencyDefaultArgs<ExtArgs>
  }

  export type $SellOrderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SellOrder"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      cryptocurrency: Prisma.$CryptocurrencyPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      sell_order_id: number
      user_id: number
      crypto_id: number
      amount: number
      fiat_amount: number
      status: string
      timestamp: Date
    }, ExtArgs["result"]["sellOrder"]>
    composites: {}
  }

  type SellOrderGetPayload<S extends boolean | null | undefined | SellOrderDefaultArgs> = $Result.GetResult<Prisma.$SellOrderPayload, S>

  type SellOrderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SellOrderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SellOrderCountAggregateInputType | true
    }

  export interface SellOrderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SellOrder'], meta: { name: 'SellOrder' } }
    /**
     * Find zero or one SellOrder that matches the filter.
     * @param {SellOrderFindUniqueArgs} args - Arguments to find a SellOrder
     * @example
     * // Get one SellOrder
     * const sellOrder = await prisma.sellOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SellOrderFindUniqueArgs>(args: SelectSubset<T, SellOrderFindUniqueArgs<ExtArgs>>): Prisma__SellOrderClient<$Result.GetResult<Prisma.$SellOrderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SellOrder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SellOrderFindUniqueOrThrowArgs} args - Arguments to find a SellOrder
     * @example
     * // Get one SellOrder
     * const sellOrder = await prisma.sellOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SellOrderFindUniqueOrThrowArgs>(args: SelectSubset<T, SellOrderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SellOrderClient<$Result.GetResult<Prisma.$SellOrderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SellOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellOrderFindFirstArgs} args - Arguments to find a SellOrder
     * @example
     * // Get one SellOrder
     * const sellOrder = await prisma.sellOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SellOrderFindFirstArgs>(args?: SelectSubset<T, SellOrderFindFirstArgs<ExtArgs>>): Prisma__SellOrderClient<$Result.GetResult<Prisma.$SellOrderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SellOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellOrderFindFirstOrThrowArgs} args - Arguments to find a SellOrder
     * @example
     * // Get one SellOrder
     * const sellOrder = await prisma.sellOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SellOrderFindFirstOrThrowArgs>(args?: SelectSubset<T, SellOrderFindFirstOrThrowArgs<ExtArgs>>): Prisma__SellOrderClient<$Result.GetResult<Prisma.$SellOrderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SellOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellOrderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SellOrders
     * const sellOrders = await prisma.sellOrder.findMany()
     * 
     * // Get first 10 SellOrders
     * const sellOrders = await prisma.sellOrder.findMany({ take: 10 })
     * 
     * // Only select the `sell_order_id`
     * const sellOrderWithSell_order_idOnly = await prisma.sellOrder.findMany({ select: { sell_order_id: true } })
     * 
     */
    findMany<T extends SellOrderFindManyArgs>(args?: SelectSubset<T, SellOrderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellOrderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SellOrder.
     * @param {SellOrderCreateArgs} args - Arguments to create a SellOrder.
     * @example
     * // Create one SellOrder
     * const SellOrder = await prisma.sellOrder.create({
     *   data: {
     *     // ... data to create a SellOrder
     *   }
     * })
     * 
     */
    create<T extends SellOrderCreateArgs>(args: SelectSubset<T, SellOrderCreateArgs<ExtArgs>>): Prisma__SellOrderClient<$Result.GetResult<Prisma.$SellOrderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SellOrders.
     * @param {SellOrderCreateManyArgs} args - Arguments to create many SellOrders.
     * @example
     * // Create many SellOrders
     * const sellOrder = await prisma.sellOrder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SellOrderCreateManyArgs>(args?: SelectSubset<T, SellOrderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SellOrders and returns the data saved in the database.
     * @param {SellOrderCreateManyAndReturnArgs} args - Arguments to create many SellOrders.
     * @example
     * // Create many SellOrders
     * const sellOrder = await prisma.sellOrder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SellOrders and only return the `sell_order_id`
     * const sellOrderWithSell_order_idOnly = await prisma.sellOrder.createManyAndReturn({
     *   select: { sell_order_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SellOrderCreateManyAndReturnArgs>(args?: SelectSubset<T, SellOrderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellOrderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SellOrder.
     * @param {SellOrderDeleteArgs} args - Arguments to delete one SellOrder.
     * @example
     * // Delete one SellOrder
     * const SellOrder = await prisma.sellOrder.delete({
     *   where: {
     *     // ... filter to delete one SellOrder
     *   }
     * })
     * 
     */
    delete<T extends SellOrderDeleteArgs>(args: SelectSubset<T, SellOrderDeleteArgs<ExtArgs>>): Prisma__SellOrderClient<$Result.GetResult<Prisma.$SellOrderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SellOrder.
     * @param {SellOrderUpdateArgs} args - Arguments to update one SellOrder.
     * @example
     * // Update one SellOrder
     * const sellOrder = await prisma.sellOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SellOrderUpdateArgs>(args: SelectSubset<T, SellOrderUpdateArgs<ExtArgs>>): Prisma__SellOrderClient<$Result.GetResult<Prisma.$SellOrderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SellOrders.
     * @param {SellOrderDeleteManyArgs} args - Arguments to filter SellOrders to delete.
     * @example
     * // Delete a few SellOrders
     * const { count } = await prisma.sellOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SellOrderDeleteManyArgs>(args?: SelectSubset<T, SellOrderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SellOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SellOrders
     * const sellOrder = await prisma.sellOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SellOrderUpdateManyArgs>(args: SelectSubset<T, SellOrderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SellOrders and returns the data updated in the database.
     * @param {SellOrderUpdateManyAndReturnArgs} args - Arguments to update many SellOrders.
     * @example
     * // Update many SellOrders
     * const sellOrder = await prisma.sellOrder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SellOrders and only return the `sell_order_id`
     * const sellOrderWithSell_order_idOnly = await prisma.sellOrder.updateManyAndReturn({
     *   select: { sell_order_id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SellOrderUpdateManyAndReturnArgs>(args: SelectSubset<T, SellOrderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SellOrderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SellOrder.
     * @param {SellOrderUpsertArgs} args - Arguments to update or create a SellOrder.
     * @example
     * // Update or create a SellOrder
     * const sellOrder = await prisma.sellOrder.upsert({
     *   create: {
     *     // ... data to create a SellOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SellOrder we want to update
     *   }
     * })
     */
    upsert<T extends SellOrderUpsertArgs>(args: SelectSubset<T, SellOrderUpsertArgs<ExtArgs>>): Prisma__SellOrderClient<$Result.GetResult<Prisma.$SellOrderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SellOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellOrderCountArgs} args - Arguments to filter SellOrders to count.
     * @example
     * // Count the number of SellOrders
     * const count = await prisma.sellOrder.count({
     *   where: {
     *     // ... the filter for the SellOrders we want to count
     *   }
     * })
    **/
    count<T extends SellOrderCountArgs>(
      args?: Subset<T, SellOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SellOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SellOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SellOrderAggregateArgs>(args: Subset<T, SellOrderAggregateArgs>): Prisma.PrismaPromise<GetSellOrderAggregateType<T>>

    /**
     * Group by SellOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SellOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SellOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SellOrderGroupByArgs['orderBy'] }
        : { orderBy?: SellOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SellOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSellOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SellOrder model
   */
  readonly fields: SellOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SellOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SellOrderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    cryptocurrency<T extends CryptocurrencyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CryptocurrencyDefaultArgs<ExtArgs>>): Prisma__CryptocurrencyClient<$Result.GetResult<Prisma.$CryptocurrencyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SellOrder model
   */ 
  interface SellOrderFieldRefs {
    readonly sell_order_id: FieldRef<"SellOrder", 'Int'>
    readonly user_id: FieldRef<"SellOrder", 'Int'>
    readonly crypto_id: FieldRef<"SellOrder", 'Int'>
    readonly amount: FieldRef<"SellOrder", 'Float'>
    readonly fiat_amount: FieldRef<"SellOrder", 'Float'>
    readonly status: FieldRef<"SellOrder", 'String'>
    readonly timestamp: FieldRef<"SellOrder", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SellOrder findUnique
   */
  export type SellOrderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderInclude<ExtArgs> | null
    /**
     * Filter, which SellOrder to fetch.
     */
    where: SellOrderWhereUniqueInput
  }

  /**
   * SellOrder findUniqueOrThrow
   */
  export type SellOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderInclude<ExtArgs> | null
    /**
     * Filter, which SellOrder to fetch.
     */
    where: SellOrderWhereUniqueInput
  }

  /**
   * SellOrder findFirst
   */
  export type SellOrderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderInclude<ExtArgs> | null
    /**
     * Filter, which SellOrder to fetch.
     */
    where?: SellOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellOrders to fetch.
     */
    orderBy?: SellOrderOrderByWithRelationInput | SellOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SellOrders.
     */
    cursor?: SellOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SellOrders.
     */
    distinct?: SellOrderScalarFieldEnum | SellOrderScalarFieldEnum[]
  }

  /**
   * SellOrder findFirstOrThrow
   */
  export type SellOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderInclude<ExtArgs> | null
    /**
     * Filter, which SellOrder to fetch.
     */
    where?: SellOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellOrders to fetch.
     */
    orderBy?: SellOrderOrderByWithRelationInput | SellOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SellOrders.
     */
    cursor?: SellOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SellOrders.
     */
    distinct?: SellOrderScalarFieldEnum | SellOrderScalarFieldEnum[]
  }

  /**
   * SellOrder findMany
   */
  export type SellOrderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderInclude<ExtArgs> | null
    /**
     * Filter, which SellOrders to fetch.
     */
    where?: SellOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SellOrders to fetch.
     */
    orderBy?: SellOrderOrderByWithRelationInput | SellOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SellOrders.
     */
    cursor?: SellOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SellOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SellOrders.
     */
    skip?: number
    distinct?: SellOrderScalarFieldEnum | SellOrderScalarFieldEnum[]
  }

  /**
   * SellOrder create
   */
  export type SellOrderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderInclude<ExtArgs> | null
    /**
     * The data needed to create a SellOrder.
     */
    data: XOR<SellOrderCreateInput, SellOrderUncheckedCreateInput>
  }

  /**
   * SellOrder createMany
   */
  export type SellOrderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SellOrders.
     */
    data: SellOrderCreateManyInput | SellOrderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SellOrder createManyAndReturn
   */
  export type SellOrderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * The data used to create many SellOrders.
     */
    data: SellOrderCreateManyInput | SellOrderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SellOrder update
   */
  export type SellOrderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderInclude<ExtArgs> | null
    /**
     * The data needed to update a SellOrder.
     */
    data: XOR<SellOrderUpdateInput, SellOrderUncheckedUpdateInput>
    /**
     * Choose, which SellOrder to update.
     */
    where: SellOrderWhereUniqueInput
  }

  /**
   * SellOrder updateMany
   */
  export type SellOrderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SellOrders.
     */
    data: XOR<SellOrderUpdateManyMutationInput, SellOrderUncheckedUpdateManyInput>
    /**
     * Filter which SellOrders to update
     */
    where?: SellOrderWhereInput
    /**
     * Limit how many SellOrders to update.
     */
    limit?: number
  }

  /**
   * SellOrder updateManyAndReturn
   */
  export type SellOrderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * The data used to update SellOrders.
     */
    data: XOR<SellOrderUpdateManyMutationInput, SellOrderUncheckedUpdateManyInput>
    /**
     * Filter which SellOrders to update
     */
    where?: SellOrderWhereInput
    /**
     * Limit how many SellOrders to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SellOrder upsert
   */
  export type SellOrderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderInclude<ExtArgs> | null
    /**
     * The filter to search for the SellOrder to update in case it exists.
     */
    where: SellOrderWhereUniqueInput
    /**
     * In case the SellOrder found by the `where` argument doesn't exist, create a new SellOrder with this data.
     */
    create: XOR<SellOrderCreateInput, SellOrderUncheckedCreateInput>
    /**
     * In case the SellOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SellOrderUpdateInput, SellOrderUncheckedUpdateInput>
  }

  /**
   * SellOrder delete
   */
  export type SellOrderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderInclude<ExtArgs> | null
    /**
     * Filter which SellOrder to delete.
     */
    where: SellOrderWhereUniqueInput
  }

  /**
   * SellOrder deleteMany
   */
  export type SellOrderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SellOrders to delete
     */
    where?: SellOrderWhereInput
    /**
     * Limit how many SellOrders to delete.
     */
    limit?: number
  }

  /**
   * SellOrder without action
   */
  export type SellOrderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SellOrder
     */
    select?: SellOrderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SellOrder
     */
    omit?: SellOrderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SellOrderInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TransactionScalarFieldEnum: {
    transaction_id: 'transaction_id',
    from_user_id: 'from_user_id',
    to_user_id: 'to_user_id',
    crypto_id: 'crypto_id',
    amount: 'amount',
    fiat_amount: 'fiat_amount',
    status: 'status',
    transaction_type: 'transaction_type',
    timestamp: 'timestamp'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    username: 'username',
    email: 'email',
    phone_number: 'phone_number',
    password: 'password',
    fiat_balance: 'fiat_balance'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CryptocurrencyScalarFieldEnum: {
    crypto_id: 'crypto_id',
    name: 'name',
    symbol: 'symbol',
    price_usd: 'price_usd'
  };

  export type CryptocurrencyScalarFieldEnum = (typeof CryptocurrencyScalarFieldEnum)[keyof typeof CryptocurrencyScalarFieldEnum]


  export const CryptoWalletScalarFieldEnum: {
    wallet_id: 'wallet_id',
    user_id: 'user_id',
    crypto_id: 'crypto_id',
    balance: 'balance'
  };

  export type CryptoWalletScalarFieldEnum = (typeof CryptoWalletScalarFieldEnum)[keyof typeof CryptoWalletScalarFieldEnum]


  export const FiatTransactionScalarFieldEnum: {
    fiat_transaction_id: 'fiat_transaction_id',
    user_id: 'user_id',
    amount: 'amount',
    fiat_type: 'fiat_type',
    transaction_type: 'transaction_type',
    transaction_date: 'transaction_date'
  };

  export type FiatTransactionScalarFieldEnum = (typeof FiatTransactionScalarFieldEnum)[keyof typeof FiatTransactionScalarFieldEnum]


  export const BuyOrderScalarFieldEnum: {
    buy_order_id: 'buy_order_id',
    user_id: 'user_id',
    crypto_id: 'crypto_id',
    amount: 'amount',
    fiat_amount: 'fiat_amount',
    status: 'status',
    timestamp: 'timestamp'
  };

  export type BuyOrderScalarFieldEnum = (typeof BuyOrderScalarFieldEnum)[keyof typeof BuyOrderScalarFieldEnum]


  export const SellOrderScalarFieldEnum: {
    sell_order_id: 'sell_order_id',
    user_id: 'user_id',
    crypto_id: 'crypto_id',
    amount: 'amount',
    fiat_amount: 'fiat_amount',
    status: 'status',
    timestamp: 'timestamp'
  };

  export type SellOrderScalarFieldEnum = (typeof SellOrderScalarFieldEnum)[keyof typeof SellOrderScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    transaction_id?: IntFilter<"Transaction"> | number
    from_user_id?: IntFilter<"Transaction"> | number
    to_user_id?: IntFilter<"Transaction"> | number
    crypto_id?: IntFilter<"Transaction"> | number
    amount?: FloatFilter<"Transaction"> | number
    fiat_amount?: FloatFilter<"Transaction"> | number
    status?: StringFilter<"Transaction"> | string
    transaction_type?: StringFilter<"Transaction"> | string
    timestamp?: DateTimeFilter<"Transaction"> | Date | string
    from_user?: XOR<UserScalarRelationFilter, UserWhereInput>
    to_user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cryptocurrency?: XOR<CryptocurrencyScalarRelationFilter, CryptocurrencyWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    transaction_id?: SortOrder
    from_user_id?: SortOrder
    to_user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    transaction_type?: SortOrder
    timestamp?: SortOrder
    from_user?: UserOrderByWithRelationInput
    to_user?: UserOrderByWithRelationInput
    cryptocurrency?: CryptocurrencyOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    transaction_id?: number
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    from_user_id?: IntFilter<"Transaction"> | number
    to_user_id?: IntFilter<"Transaction"> | number
    crypto_id?: IntFilter<"Transaction"> | number
    amount?: FloatFilter<"Transaction"> | number
    fiat_amount?: FloatFilter<"Transaction"> | number
    status?: StringFilter<"Transaction"> | string
    transaction_type?: StringFilter<"Transaction"> | string
    timestamp?: DateTimeFilter<"Transaction"> | Date | string
    from_user?: XOR<UserScalarRelationFilter, UserWhereInput>
    to_user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cryptocurrency?: XOR<CryptocurrencyScalarRelationFilter, CryptocurrencyWhereInput>
  }, "transaction_id">

  export type TransactionOrderByWithAggregationInput = {
    transaction_id?: SortOrder
    from_user_id?: SortOrder
    to_user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    transaction_type?: SortOrder
    timestamp?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    transaction_id?: IntWithAggregatesFilter<"Transaction"> | number
    from_user_id?: IntWithAggregatesFilter<"Transaction"> | number
    to_user_id?: IntWithAggregatesFilter<"Transaction"> | number
    crypto_id?: IntWithAggregatesFilter<"Transaction"> | number
    amount?: FloatWithAggregatesFilter<"Transaction"> | number
    fiat_amount?: FloatWithAggregatesFilter<"Transaction"> | number
    status?: StringWithAggregatesFilter<"Transaction"> | string
    transaction_type?: StringWithAggregatesFilter<"Transaction"> | string
    timestamp?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone_number?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    fiat_balance?: FloatFilter<"User"> | number
    crypto_wallet?: CryptoWalletListRelationFilter
    transactions?: TransactionListRelationFilter
    receivedTransactions?: TransactionListRelationFilter
    fiatTransaction?: FiatTransactionListRelationFilter
    buy_orders?: BuyOrderListRelationFilter
    sell_orders?: SellOrderListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    fiat_balance?: SortOrder
    crypto_wallet?: CryptoWalletOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    receivedTransactions?: TransactionOrderByRelationAggregateInput
    fiatTransaction?: FiatTransactionOrderByRelationAggregateInput
    buy_orders?: BuyOrderOrderByRelationAggregateInput
    sell_orders?: SellOrderOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringFilter<"User"> | string
    phone_number?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    fiat_balance?: FloatFilter<"User"> | number
    crypto_wallet?: CryptoWalletListRelationFilter
    transactions?: TransactionListRelationFilter
    receivedTransactions?: TransactionListRelationFilter
    fiatTransaction?: FiatTransactionListRelationFilter
    buy_orders?: BuyOrderListRelationFilter
    sell_orders?: SellOrderListRelationFilter
  }, "user_id" | "email">

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    fiat_balance?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phone_number?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    fiat_balance?: FloatWithAggregatesFilter<"User"> | number
  }

  export type CryptocurrencyWhereInput = {
    AND?: CryptocurrencyWhereInput | CryptocurrencyWhereInput[]
    OR?: CryptocurrencyWhereInput[]
    NOT?: CryptocurrencyWhereInput | CryptocurrencyWhereInput[]
    crypto_id?: IntFilter<"Cryptocurrency"> | number
    name?: StringFilter<"Cryptocurrency"> | string
    symbol?: StringFilter<"Cryptocurrency"> | string
    price_usd?: FloatFilter<"Cryptocurrency"> | number
    transactions?: TransactionListRelationFilter
    crypto_wallet?: CryptoWalletListRelationFilter
    buy_orders?: BuyOrderListRelationFilter
    sell_orders?: SellOrderListRelationFilter
  }

  export type CryptocurrencyOrderByWithRelationInput = {
    crypto_id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    price_usd?: SortOrder
    transactions?: TransactionOrderByRelationAggregateInput
    crypto_wallet?: CryptoWalletOrderByRelationAggregateInput
    buy_orders?: BuyOrderOrderByRelationAggregateInput
    sell_orders?: SellOrderOrderByRelationAggregateInput
  }

  export type CryptocurrencyWhereUniqueInput = Prisma.AtLeast<{
    crypto_id?: number
    symbol?: string
    AND?: CryptocurrencyWhereInput | CryptocurrencyWhereInput[]
    OR?: CryptocurrencyWhereInput[]
    NOT?: CryptocurrencyWhereInput | CryptocurrencyWhereInput[]
    name?: StringFilter<"Cryptocurrency"> | string
    price_usd?: FloatFilter<"Cryptocurrency"> | number
    transactions?: TransactionListRelationFilter
    crypto_wallet?: CryptoWalletListRelationFilter
    buy_orders?: BuyOrderListRelationFilter
    sell_orders?: SellOrderListRelationFilter
  }, "crypto_id" | "symbol">

  export type CryptocurrencyOrderByWithAggregationInput = {
    crypto_id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    price_usd?: SortOrder
    _count?: CryptocurrencyCountOrderByAggregateInput
    _avg?: CryptocurrencyAvgOrderByAggregateInput
    _max?: CryptocurrencyMaxOrderByAggregateInput
    _min?: CryptocurrencyMinOrderByAggregateInput
    _sum?: CryptocurrencySumOrderByAggregateInput
  }

  export type CryptocurrencyScalarWhereWithAggregatesInput = {
    AND?: CryptocurrencyScalarWhereWithAggregatesInput | CryptocurrencyScalarWhereWithAggregatesInput[]
    OR?: CryptocurrencyScalarWhereWithAggregatesInput[]
    NOT?: CryptocurrencyScalarWhereWithAggregatesInput | CryptocurrencyScalarWhereWithAggregatesInput[]
    crypto_id?: IntWithAggregatesFilter<"Cryptocurrency"> | number
    name?: StringWithAggregatesFilter<"Cryptocurrency"> | string
    symbol?: StringWithAggregatesFilter<"Cryptocurrency"> | string
    price_usd?: FloatWithAggregatesFilter<"Cryptocurrency"> | number
  }

  export type CryptoWalletWhereInput = {
    AND?: CryptoWalletWhereInput | CryptoWalletWhereInput[]
    OR?: CryptoWalletWhereInput[]
    NOT?: CryptoWalletWhereInput | CryptoWalletWhereInput[]
    wallet_id?: IntFilter<"CryptoWallet"> | number
    user_id?: IntFilter<"CryptoWallet"> | number
    crypto_id?: IntFilter<"CryptoWallet"> | number
    balance?: FloatFilter<"CryptoWallet"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cryptocurrency?: XOR<CryptocurrencyScalarRelationFilter, CryptocurrencyWhereInput>
  }

  export type CryptoWalletOrderByWithRelationInput = {
    wallet_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    balance?: SortOrder
    user?: UserOrderByWithRelationInput
    cryptocurrency?: CryptocurrencyOrderByWithRelationInput
  }

  export type CryptoWalletWhereUniqueInput = Prisma.AtLeast<{
    wallet_id?: number
    user_id_crypto_id?: CryptoWalletUser_idCrypto_idCompoundUniqueInput
    AND?: CryptoWalletWhereInput | CryptoWalletWhereInput[]
    OR?: CryptoWalletWhereInput[]
    NOT?: CryptoWalletWhereInput | CryptoWalletWhereInput[]
    user_id?: IntFilter<"CryptoWallet"> | number
    crypto_id?: IntFilter<"CryptoWallet"> | number
    balance?: FloatFilter<"CryptoWallet"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cryptocurrency?: XOR<CryptocurrencyScalarRelationFilter, CryptocurrencyWhereInput>
  }, "wallet_id" | "user_id_crypto_id">

  export type CryptoWalletOrderByWithAggregationInput = {
    wallet_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    balance?: SortOrder
    _count?: CryptoWalletCountOrderByAggregateInput
    _avg?: CryptoWalletAvgOrderByAggregateInput
    _max?: CryptoWalletMaxOrderByAggregateInput
    _min?: CryptoWalletMinOrderByAggregateInput
    _sum?: CryptoWalletSumOrderByAggregateInput
  }

  export type CryptoWalletScalarWhereWithAggregatesInput = {
    AND?: CryptoWalletScalarWhereWithAggregatesInput | CryptoWalletScalarWhereWithAggregatesInput[]
    OR?: CryptoWalletScalarWhereWithAggregatesInput[]
    NOT?: CryptoWalletScalarWhereWithAggregatesInput | CryptoWalletScalarWhereWithAggregatesInput[]
    wallet_id?: IntWithAggregatesFilter<"CryptoWallet"> | number
    user_id?: IntWithAggregatesFilter<"CryptoWallet"> | number
    crypto_id?: IntWithAggregatesFilter<"CryptoWallet"> | number
    balance?: FloatWithAggregatesFilter<"CryptoWallet"> | number
  }

  export type FiatTransactionWhereInput = {
    AND?: FiatTransactionWhereInput | FiatTransactionWhereInput[]
    OR?: FiatTransactionWhereInput[]
    NOT?: FiatTransactionWhereInput | FiatTransactionWhereInput[]
    fiat_transaction_id?: IntFilter<"FiatTransaction"> | number
    user_id?: IntFilter<"FiatTransaction"> | number
    amount?: FloatFilter<"FiatTransaction"> | number
    fiat_type?: StringFilter<"FiatTransaction"> | string
    transaction_type?: StringFilter<"FiatTransaction"> | string
    transaction_date?: DateTimeFilter<"FiatTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FiatTransactionOrderByWithRelationInput = {
    fiat_transaction_id?: SortOrder
    user_id?: SortOrder
    amount?: SortOrder
    fiat_type?: SortOrder
    transaction_type?: SortOrder
    transaction_date?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FiatTransactionWhereUniqueInput = Prisma.AtLeast<{
    fiat_transaction_id?: number
    AND?: FiatTransactionWhereInput | FiatTransactionWhereInput[]
    OR?: FiatTransactionWhereInput[]
    NOT?: FiatTransactionWhereInput | FiatTransactionWhereInput[]
    user_id?: IntFilter<"FiatTransaction"> | number
    amount?: FloatFilter<"FiatTransaction"> | number
    fiat_type?: StringFilter<"FiatTransaction"> | string
    transaction_type?: StringFilter<"FiatTransaction"> | string
    transaction_date?: DateTimeFilter<"FiatTransaction"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "fiat_transaction_id">

  export type FiatTransactionOrderByWithAggregationInput = {
    fiat_transaction_id?: SortOrder
    user_id?: SortOrder
    amount?: SortOrder
    fiat_type?: SortOrder
    transaction_type?: SortOrder
    transaction_date?: SortOrder
    _count?: FiatTransactionCountOrderByAggregateInput
    _avg?: FiatTransactionAvgOrderByAggregateInput
    _max?: FiatTransactionMaxOrderByAggregateInput
    _min?: FiatTransactionMinOrderByAggregateInput
    _sum?: FiatTransactionSumOrderByAggregateInput
  }

  export type FiatTransactionScalarWhereWithAggregatesInput = {
    AND?: FiatTransactionScalarWhereWithAggregatesInput | FiatTransactionScalarWhereWithAggregatesInput[]
    OR?: FiatTransactionScalarWhereWithAggregatesInput[]
    NOT?: FiatTransactionScalarWhereWithAggregatesInput | FiatTransactionScalarWhereWithAggregatesInput[]
    fiat_transaction_id?: IntWithAggregatesFilter<"FiatTransaction"> | number
    user_id?: IntWithAggregatesFilter<"FiatTransaction"> | number
    amount?: FloatWithAggregatesFilter<"FiatTransaction"> | number
    fiat_type?: StringWithAggregatesFilter<"FiatTransaction"> | string
    transaction_type?: StringWithAggregatesFilter<"FiatTransaction"> | string
    transaction_date?: DateTimeWithAggregatesFilter<"FiatTransaction"> | Date | string
  }

  export type BuyOrderWhereInput = {
    AND?: BuyOrderWhereInput | BuyOrderWhereInput[]
    OR?: BuyOrderWhereInput[]
    NOT?: BuyOrderWhereInput | BuyOrderWhereInput[]
    buy_order_id?: IntFilter<"BuyOrder"> | number
    user_id?: IntFilter<"BuyOrder"> | number
    crypto_id?: IntFilter<"BuyOrder"> | number
    amount?: FloatFilter<"BuyOrder"> | number
    fiat_amount?: FloatFilter<"BuyOrder"> | number
    status?: StringFilter<"BuyOrder"> | string
    timestamp?: DateTimeFilter<"BuyOrder"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cryptocurrency?: XOR<CryptocurrencyScalarRelationFilter, CryptocurrencyWhereInput>
  }

  export type BuyOrderOrderByWithRelationInput = {
    buy_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
    cryptocurrency?: CryptocurrencyOrderByWithRelationInput
  }

  export type BuyOrderWhereUniqueInput = Prisma.AtLeast<{
    buy_order_id?: number
    AND?: BuyOrderWhereInput | BuyOrderWhereInput[]
    OR?: BuyOrderWhereInput[]
    NOT?: BuyOrderWhereInput | BuyOrderWhereInput[]
    user_id?: IntFilter<"BuyOrder"> | number
    crypto_id?: IntFilter<"BuyOrder"> | number
    amount?: FloatFilter<"BuyOrder"> | number
    fiat_amount?: FloatFilter<"BuyOrder"> | number
    status?: StringFilter<"BuyOrder"> | string
    timestamp?: DateTimeFilter<"BuyOrder"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cryptocurrency?: XOR<CryptocurrencyScalarRelationFilter, CryptocurrencyWhereInput>
  }, "buy_order_id">

  export type BuyOrderOrderByWithAggregationInput = {
    buy_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    timestamp?: SortOrder
    _count?: BuyOrderCountOrderByAggregateInput
    _avg?: BuyOrderAvgOrderByAggregateInput
    _max?: BuyOrderMaxOrderByAggregateInput
    _min?: BuyOrderMinOrderByAggregateInput
    _sum?: BuyOrderSumOrderByAggregateInput
  }

  export type BuyOrderScalarWhereWithAggregatesInput = {
    AND?: BuyOrderScalarWhereWithAggregatesInput | BuyOrderScalarWhereWithAggregatesInput[]
    OR?: BuyOrderScalarWhereWithAggregatesInput[]
    NOT?: BuyOrderScalarWhereWithAggregatesInput | BuyOrderScalarWhereWithAggregatesInput[]
    buy_order_id?: IntWithAggregatesFilter<"BuyOrder"> | number
    user_id?: IntWithAggregatesFilter<"BuyOrder"> | number
    crypto_id?: IntWithAggregatesFilter<"BuyOrder"> | number
    amount?: FloatWithAggregatesFilter<"BuyOrder"> | number
    fiat_amount?: FloatWithAggregatesFilter<"BuyOrder"> | number
    status?: StringWithAggregatesFilter<"BuyOrder"> | string
    timestamp?: DateTimeWithAggregatesFilter<"BuyOrder"> | Date | string
  }

  export type SellOrderWhereInput = {
    AND?: SellOrderWhereInput | SellOrderWhereInput[]
    OR?: SellOrderWhereInput[]
    NOT?: SellOrderWhereInput | SellOrderWhereInput[]
    sell_order_id?: IntFilter<"SellOrder"> | number
    user_id?: IntFilter<"SellOrder"> | number
    crypto_id?: IntFilter<"SellOrder"> | number
    amount?: FloatFilter<"SellOrder"> | number
    fiat_amount?: FloatFilter<"SellOrder"> | number
    status?: StringFilter<"SellOrder"> | string
    timestamp?: DateTimeFilter<"SellOrder"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cryptocurrency?: XOR<CryptocurrencyScalarRelationFilter, CryptocurrencyWhereInput>
  }

  export type SellOrderOrderByWithRelationInput = {
    sell_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
    cryptocurrency?: CryptocurrencyOrderByWithRelationInput
  }

  export type SellOrderWhereUniqueInput = Prisma.AtLeast<{
    sell_order_id?: number
    AND?: SellOrderWhereInput | SellOrderWhereInput[]
    OR?: SellOrderWhereInput[]
    NOT?: SellOrderWhereInput | SellOrderWhereInput[]
    user_id?: IntFilter<"SellOrder"> | number
    crypto_id?: IntFilter<"SellOrder"> | number
    amount?: FloatFilter<"SellOrder"> | number
    fiat_amount?: FloatFilter<"SellOrder"> | number
    status?: StringFilter<"SellOrder"> | string
    timestamp?: DateTimeFilter<"SellOrder"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    cryptocurrency?: XOR<CryptocurrencyScalarRelationFilter, CryptocurrencyWhereInput>
  }, "sell_order_id">

  export type SellOrderOrderByWithAggregationInput = {
    sell_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    timestamp?: SortOrder
    _count?: SellOrderCountOrderByAggregateInput
    _avg?: SellOrderAvgOrderByAggregateInput
    _max?: SellOrderMaxOrderByAggregateInput
    _min?: SellOrderMinOrderByAggregateInput
    _sum?: SellOrderSumOrderByAggregateInput
  }

  export type SellOrderScalarWhereWithAggregatesInput = {
    AND?: SellOrderScalarWhereWithAggregatesInput | SellOrderScalarWhereWithAggregatesInput[]
    OR?: SellOrderScalarWhereWithAggregatesInput[]
    NOT?: SellOrderScalarWhereWithAggregatesInput | SellOrderScalarWhereWithAggregatesInput[]
    sell_order_id?: IntWithAggregatesFilter<"SellOrder"> | number
    user_id?: IntWithAggregatesFilter<"SellOrder"> | number
    crypto_id?: IntWithAggregatesFilter<"SellOrder"> | number
    amount?: FloatWithAggregatesFilter<"SellOrder"> | number
    fiat_amount?: FloatWithAggregatesFilter<"SellOrder"> | number
    status?: StringWithAggregatesFilter<"SellOrder"> | string
    timestamp?: DateTimeWithAggregatesFilter<"SellOrder"> | Date | string
  }

  export type TransactionCreateInput = {
    amount: number
    fiat_amount: number
    status?: string
    transaction_type: string
    timestamp?: Date | string
    from_user: UserCreateNestedOneWithoutTransactionsInput
    to_user: UserCreateNestedOneWithoutReceivedTransactionsInput
    cryptocurrency: CryptocurrencyCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    transaction_id?: number
    from_user_id: number
    to_user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    transaction_type: string
    timestamp?: Date | string
  }

  export type TransactionUpdateInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    from_user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
    to_user?: UserUpdateOneRequiredWithoutReceivedTransactionsNestedInput
    cryptocurrency?: CryptocurrencyUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    transaction_id?: IntFieldUpdateOperationsInput | number
    from_user_id?: IntFieldUpdateOperationsInput | number
    to_user_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    transaction_id?: number
    from_user_id: number
    to_user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    transaction_type: string
    timestamp?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    transaction_id?: IntFieldUpdateOperationsInput | number
    from_user_id?: IntFieldUpdateOperationsInput | number
    to_user_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    crypto_wallet?: CryptoWalletCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutFrom_userInput
    receivedTransactions?: TransactionCreateNestedManyWithoutTo_userInput
    fiatTransaction?: FiatTransactionCreateNestedManyWithoutUserInput
    buy_orders?: BuyOrderCreateNestedManyWithoutUserInput
    sell_orders?: SellOrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    user_id?: number
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    crypto_wallet?: CryptoWalletUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutFrom_userInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutTo_userInput
    fiatTransaction?: FiatTransactionUncheckedCreateNestedManyWithoutUserInput
    buy_orders?: BuyOrderUncheckedCreateNestedManyWithoutUserInput
    sell_orders?: SellOrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutFrom_userNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutTo_userNestedInput
    fiatTransaction?: FiatTransactionUpdateManyWithoutUserNestedInput
    buy_orders?: BuyOrderUpdateManyWithoutUserNestedInput
    sell_orders?: SellOrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutFrom_userNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutTo_userNestedInput
    fiatTransaction?: FiatTransactionUncheckedUpdateManyWithoutUserNestedInput
    buy_orders?: BuyOrderUncheckedUpdateManyWithoutUserNestedInput
    sell_orders?: SellOrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    user_id?: number
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
  }

  export type CryptocurrencyCreateInput = {
    name: string
    symbol: string
    price_usd: number
    transactions?: TransactionCreateNestedManyWithoutCryptocurrencyInput
    crypto_wallet?: CryptoWalletCreateNestedManyWithoutCryptocurrencyInput
    buy_orders?: BuyOrderCreateNestedManyWithoutCryptocurrencyInput
    sell_orders?: SellOrderCreateNestedManyWithoutCryptocurrencyInput
  }

  export type CryptocurrencyUncheckedCreateInput = {
    crypto_id?: number
    name: string
    symbol: string
    price_usd: number
    transactions?: TransactionUncheckedCreateNestedManyWithoutCryptocurrencyInput
    crypto_wallet?: CryptoWalletUncheckedCreateNestedManyWithoutCryptocurrencyInput
    buy_orders?: BuyOrderUncheckedCreateNestedManyWithoutCryptocurrencyInput
    sell_orders?: SellOrderUncheckedCreateNestedManyWithoutCryptocurrencyInput
  }

  export type CryptocurrencyUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    price_usd?: FloatFieldUpdateOperationsInput | number
    transactions?: TransactionUpdateManyWithoutCryptocurrencyNestedInput
    crypto_wallet?: CryptoWalletUpdateManyWithoutCryptocurrencyNestedInput
    buy_orders?: BuyOrderUpdateManyWithoutCryptocurrencyNestedInput
    sell_orders?: SellOrderUpdateManyWithoutCryptocurrencyNestedInput
  }

  export type CryptocurrencyUncheckedUpdateInput = {
    crypto_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    price_usd?: FloatFieldUpdateOperationsInput | number
    transactions?: TransactionUncheckedUpdateManyWithoutCryptocurrencyNestedInput
    crypto_wallet?: CryptoWalletUncheckedUpdateManyWithoutCryptocurrencyNestedInput
    buy_orders?: BuyOrderUncheckedUpdateManyWithoutCryptocurrencyNestedInput
    sell_orders?: SellOrderUncheckedUpdateManyWithoutCryptocurrencyNestedInput
  }

  export type CryptocurrencyCreateManyInput = {
    crypto_id?: number
    name: string
    symbol: string
    price_usd: number
  }

  export type CryptocurrencyUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    price_usd?: FloatFieldUpdateOperationsInput | number
  }

  export type CryptocurrencyUncheckedUpdateManyInput = {
    crypto_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    price_usd?: FloatFieldUpdateOperationsInput | number
  }

  export type CryptoWalletCreateInput = {
    balance?: number
    user: UserCreateNestedOneWithoutCrypto_walletInput
    cryptocurrency: CryptocurrencyCreateNestedOneWithoutCrypto_walletInput
  }

  export type CryptoWalletUncheckedCreateInput = {
    wallet_id?: number
    user_id: number
    crypto_id: number
    balance?: number
  }

  export type CryptoWalletUpdateInput = {
    balance?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCrypto_walletNestedInput
    cryptocurrency?: CryptocurrencyUpdateOneRequiredWithoutCrypto_walletNestedInput
  }

  export type CryptoWalletUncheckedUpdateInput = {
    wallet_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
  }

  export type CryptoWalletCreateManyInput = {
    wallet_id?: number
    user_id: number
    crypto_id: number
    balance?: number
  }

  export type CryptoWalletUpdateManyMutationInput = {
    balance?: FloatFieldUpdateOperationsInput | number
  }

  export type CryptoWalletUncheckedUpdateManyInput = {
    wallet_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
  }

  export type FiatTransactionCreateInput = {
    amount: number
    fiat_type: string
    transaction_type: string
    transaction_date?: Date | string
    user: UserCreateNestedOneWithoutFiatTransactionInput
  }

  export type FiatTransactionUncheckedCreateInput = {
    fiat_transaction_id?: number
    user_id: number
    amount: number
    fiat_type: string
    transaction_type: string
    transaction_date?: Date | string
  }

  export type FiatTransactionUpdateInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_type?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFiatTransactionNestedInput
  }

  export type FiatTransactionUncheckedUpdateInput = {
    fiat_transaction_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_type?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FiatTransactionCreateManyInput = {
    fiat_transaction_id?: number
    user_id: number
    amount: number
    fiat_type: string
    transaction_type: string
    transaction_date?: Date | string
  }

  export type FiatTransactionUpdateManyMutationInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_type?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FiatTransactionUncheckedUpdateManyInput = {
    fiat_transaction_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_type?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyOrderCreateInput = {
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutBuy_ordersInput
    cryptocurrency: CryptocurrencyCreateNestedOneWithoutBuy_ordersInput
  }

  export type BuyOrderUncheckedCreateInput = {
    buy_order_id?: number
    user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
  }

  export type BuyOrderUpdateInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBuy_ordersNestedInput
    cryptocurrency?: CryptocurrencyUpdateOneRequiredWithoutBuy_ordersNestedInput
  }

  export type BuyOrderUncheckedUpdateInput = {
    buy_order_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyOrderCreateManyInput = {
    buy_order_id?: number
    user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
  }

  export type BuyOrderUpdateManyMutationInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyOrderUncheckedUpdateManyInput = {
    buy_order_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellOrderCreateInput = {
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutSell_ordersInput
    cryptocurrency: CryptocurrencyCreateNestedOneWithoutSell_ordersInput
  }

  export type SellOrderUncheckedCreateInput = {
    sell_order_id?: number
    user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
  }

  export type SellOrderUpdateInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSell_ordersNestedInput
    cryptocurrency?: CryptocurrencyUpdateOneRequiredWithoutSell_ordersNestedInput
  }

  export type SellOrderUncheckedUpdateInput = {
    sell_order_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellOrderCreateManyInput = {
    sell_order_id?: number
    user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
  }

  export type SellOrderUpdateManyMutationInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellOrderUncheckedUpdateManyInput = {
    sell_order_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CryptocurrencyScalarRelationFilter = {
    is?: CryptocurrencyWhereInput
    isNot?: CryptocurrencyWhereInput
  }

  export type TransactionCountOrderByAggregateInput = {
    transaction_id?: SortOrder
    from_user_id?: SortOrder
    to_user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    transaction_type?: SortOrder
    timestamp?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    transaction_id?: SortOrder
    from_user_id?: SortOrder
    to_user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    transaction_id?: SortOrder
    from_user_id?: SortOrder
    to_user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    transaction_type?: SortOrder
    timestamp?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    transaction_id?: SortOrder
    from_user_id?: SortOrder
    to_user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    transaction_type?: SortOrder
    timestamp?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    transaction_id?: SortOrder
    from_user_id?: SortOrder
    to_user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type CryptoWalletListRelationFilter = {
    every?: CryptoWalletWhereInput
    some?: CryptoWalletWhereInput
    none?: CryptoWalletWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type FiatTransactionListRelationFilter = {
    every?: FiatTransactionWhereInput
    some?: FiatTransactionWhereInput
    none?: FiatTransactionWhereInput
  }

  export type BuyOrderListRelationFilter = {
    every?: BuyOrderWhereInput
    some?: BuyOrderWhereInput
    none?: BuyOrderWhereInput
  }

  export type SellOrderListRelationFilter = {
    every?: SellOrderWhereInput
    some?: SellOrderWhereInput
    none?: SellOrderWhereInput
  }

  export type CryptoWalletOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FiatTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BuyOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SellOrderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    fiat_balance?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    user_id?: SortOrder
    fiat_balance?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    fiat_balance?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    phone_number?: SortOrder
    password?: SortOrder
    fiat_balance?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    user_id?: SortOrder
    fiat_balance?: SortOrder
  }

  export type CryptocurrencyCountOrderByAggregateInput = {
    crypto_id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    price_usd?: SortOrder
  }

  export type CryptocurrencyAvgOrderByAggregateInput = {
    crypto_id?: SortOrder
    price_usd?: SortOrder
  }

  export type CryptocurrencyMaxOrderByAggregateInput = {
    crypto_id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    price_usd?: SortOrder
  }

  export type CryptocurrencyMinOrderByAggregateInput = {
    crypto_id?: SortOrder
    name?: SortOrder
    symbol?: SortOrder
    price_usd?: SortOrder
  }

  export type CryptocurrencySumOrderByAggregateInput = {
    crypto_id?: SortOrder
    price_usd?: SortOrder
  }

  export type CryptoWalletUser_idCrypto_idCompoundUniqueInput = {
    user_id: number
    crypto_id: number
  }

  export type CryptoWalletCountOrderByAggregateInput = {
    wallet_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    balance?: SortOrder
  }

  export type CryptoWalletAvgOrderByAggregateInput = {
    wallet_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    balance?: SortOrder
  }

  export type CryptoWalletMaxOrderByAggregateInput = {
    wallet_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    balance?: SortOrder
  }

  export type CryptoWalletMinOrderByAggregateInput = {
    wallet_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    balance?: SortOrder
  }

  export type CryptoWalletSumOrderByAggregateInput = {
    wallet_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    balance?: SortOrder
  }

  export type FiatTransactionCountOrderByAggregateInput = {
    fiat_transaction_id?: SortOrder
    user_id?: SortOrder
    amount?: SortOrder
    fiat_type?: SortOrder
    transaction_type?: SortOrder
    transaction_date?: SortOrder
  }

  export type FiatTransactionAvgOrderByAggregateInput = {
    fiat_transaction_id?: SortOrder
    user_id?: SortOrder
    amount?: SortOrder
  }

  export type FiatTransactionMaxOrderByAggregateInput = {
    fiat_transaction_id?: SortOrder
    user_id?: SortOrder
    amount?: SortOrder
    fiat_type?: SortOrder
    transaction_type?: SortOrder
    transaction_date?: SortOrder
  }

  export type FiatTransactionMinOrderByAggregateInput = {
    fiat_transaction_id?: SortOrder
    user_id?: SortOrder
    amount?: SortOrder
    fiat_type?: SortOrder
    transaction_type?: SortOrder
    transaction_date?: SortOrder
  }

  export type FiatTransactionSumOrderByAggregateInput = {
    fiat_transaction_id?: SortOrder
    user_id?: SortOrder
    amount?: SortOrder
  }

  export type BuyOrderCountOrderByAggregateInput = {
    buy_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    timestamp?: SortOrder
  }

  export type BuyOrderAvgOrderByAggregateInput = {
    buy_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
  }

  export type BuyOrderMaxOrderByAggregateInput = {
    buy_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    timestamp?: SortOrder
  }

  export type BuyOrderMinOrderByAggregateInput = {
    buy_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    timestamp?: SortOrder
  }

  export type BuyOrderSumOrderByAggregateInput = {
    buy_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
  }

  export type SellOrderCountOrderByAggregateInput = {
    sell_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    timestamp?: SortOrder
  }

  export type SellOrderAvgOrderByAggregateInput = {
    sell_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
  }

  export type SellOrderMaxOrderByAggregateInput = {
    sell_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    timestamp?: SortOrder
  }

  export type SellOrderMinOrderByAggregateInput = {
    sell_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
    status?: SortOrder
    timestamp?: SortOrder
  }

  export type SellOrderSumOrderByAggregateInput = {
    sell_order_id?: SortOrder
    user_id?: SortOrder
    crypto_id?: SortOrder
    amount?: SortOrder
    fiat_amount?: SortOrder
  }

  export type UserCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReceivedTransactionsInput = {
    create?: XOR<UserCreateWithoutReceivedTransactionsInput, UserUncheckedCreateWithoutReceivedTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type CryptocurrencyCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<CryptocurrencyCreateWithoutTransactionsInput, CryptocurrencyUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CryptocurrencyCreateOrConnectWithoutTransactionsInput
    connect?: CryptocurrencyWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    upsert?: UserUpsertWithoutTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTransactionsInput, UserUpdateWithoutTransactionsInput>, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateOneRequiredWithoutReceivedTransactionsNestedInput = {
    create?: XOR<UserCreateWithoutReceivedTransactionsInput, UserUncheckedCreateWithoutReceivedTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReceivedTransactionsInput
    upsert?: UserUpsertWithoutReceivedTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReceivedTransactionsInput, UserUpdateWithoutReceivedTransactionsInput>, UserUncheckedUpdateWithoutReceivedTransactionsInput>
  }

  export type CryptocurrencyUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<CryptocurrencyCreateWithoutTransactionsInput, CryptocurrencyUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CryptocurrencyCreateOrConnectWithoutTransactionsInput
    upsert?: CryptocurrencyUpsertWithoutTransactionsInput
    connect?: CryptocurrencyWhereUniqueInput
    update?: XOR<XOR<CryptocurrencyUpdateToOneWithWhereWithoutTransactionsInput, CryptocurrencyUpdateWithoutTransactionsInput>, CryptocurrencyUncheckedUpdateWithoutTransactionsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CryptoWalletCreateNestedManyWithoutUserInput = {
    create?: XOR<CryptoWalletCreateWithoutUserInput, CryptoWalletUncheckedCreateWithoutUserInput> | CryptoWalletCreateWithoutUserInput[] | CryptoWalletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CryptoWalletCreateOrConnectWithoutUserInput | CryptoWalletCreateOrConnectWithoutUserInput[]
    createMany?: CryptoWalletCreateManyUserInputEnvelope
    connect?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutFrom_userInput = {
    create?: XOR<TransactionCreateWithoutFrom_userInput, TransactionUncheckedCreateWithoutFrom_userInput> | TransactionCreateWithoutFrom_userInput[] | TransactionUncheckedCreateWithoutFrom_userInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutFrom_userInput | TransactionCreateOrConnectWithoutFrom_userInput[]
    createMany?: TransactionCreateManyFrom_userInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionCreateNestedManyWithoutTo_userInput = {
    create?: XOR<TransactionCreateWithoutTo_userInput, TransactionUncheckedCreateWithoutTo_userInput> | TransactionCreateWithoutTo_userInput[] | TransactionUncheckedCreateWithoutTo_userInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutTo_userInput | TransactionCreateOrConnectWithoutTo_userInput[]
    createMany?: TransactionCreateManyTo_userInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type FiatTransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<FiatTransactionCreateWithoutUserInput, FiatTransactionUncheckedCreateWithoutUserInput> | FiatTransactionCreateWithoutUserInput[] | FiatTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FiatTransactionCreateOrConnectWithoutUserInput | FiatTransactionCreateOrConnectWithoutUserInput[]
    createMany?: FiatTransactionCreateManyUserInputEnvelope
    connect?: FiatTransactionWhereUniqueInput | FiatTransactionWhereUniqueInput[]
  }

  export type BuyOrderCreateNestedManyWithoutUserInput = {
    create?: XOR<BuyOrderCreateWithoutUserInput, BuyOrderUncheckedCreateWithoutUserInput> | BuyOrderCreateWithoutUserInput[] | BuyOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyOrderCreateOrConnectWithoutUserInput | BuyOrderCreateOrConnectWithoutUserInput[]
    createMany?: BuyOrderCreateManyUserInputEnvelope
    connect?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
  }

  export type SellOrderCreateNestedManyWithoutUserInput = {
    create?: XOR<SellOrderCreateWithoutUserInput, SellOrderUncheckedCreateWithoutUserInput> | SellOrderCreateWithoutUserInput[] | SellOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SellOrderCreateOrConnectWithoutUserInput | SellOrderCreateOrConnectWithoutUserInput[]
    createMany?: SellOrderCreateManyUserInputEnvelope
    connect?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
  }

  export type CryptoWalletUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CryptoWalletCreateWithoutUserInput, CryptoWalletUncheckedCreateWithoutUserInput> | CryptoWalletCreateWithoutUserInput[] | CryptoWalletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CryptoWalletCreateOrConnectWithoutUserInput | CryptoWalletCreateOrConnectWithoutUserInput[]
    createMany?: CryptoWalletCreateManyUserInputEnvelope
    connect?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutFrom_userInput = {
    create?: XOR<TransactionCreateWithoutFrom_userInput, TransactionUncheckedCreateWithoutFrom_userInput> | TransactionCreateWithoutFrom_userInput[] | TransactionUncheckedCreateWithoutFrom_userInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutFrom_userInput | TransactionCreateOrConnectWithoutFrom_userInput[]
    createMany?: TransactionCreateManyFrom_userInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutTo_userInput = {
    create?: XOR<TransactionCreateWithoutTo_userInput, TransactionUncheckedCreateWithoutTo_userInput> | TransactionCreateWithoutTo_userInput[] | TransactionUncheckedCreateWithoutTo_userInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutTo_userInput | TransactionCreateOrConnectWithoutTo_userInput[]
    createMany?: TransactionCreateManyTo_userInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type FiatTransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FiatTransactionCreateWithoutUserInput, FiatTransactionUncheckedCreateWithoutUserInput> | FiatTransactionCreateWithoutUserInput[] | FiatTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FiatTransactionCreateOrConnectWithoutUserInput | FiatTransactionCreateOrConnectWithoutUserInput[]
    createMany?: FiatTransactionCreateManyUserInputEnvelope
    connect?: FiatTransactionWhereUniqueInput | FiatTransactionWhereUniqueInput[]
  }

  export type BuyOrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BuyOrderCreateWithoutUserInput, BuyOrderUncheckedCreateWithoutUserInput> | BuyOrderCreateWithoutUserInput[] | BuyOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyOrderCreateOrConnectWithoutUserInput | BuyOrderCreateOrConnectWithoutUserInput[]
    createMany?: BuyOrderCreateManyUserInputEnvelope
    connect?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
  }

  export type SellOrderUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SellOrderCreateWithoutUserInput, SellOrderUncheckedCreateWithoutUserInput> | SellOrderCreateWithoutUserInput[] | SellOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SellOrderCreateOrConnectWithoutUserInput | SellOrderCreateOrConnectWithoutUserInput[]
    createMany?: SellOrderCreateManyUserInputEnvelope
    connect?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
  }

  export type CryptoWalletUpdateManyWithoutUserNestedInput = {
    create?: XOR<CryptoWalletCreateWithoutUserInput, CryptoWalletUncheckedCreateWithoutUserInput> | CryptoWalletCreateWithoutUserInput[] | CryptoWalletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CryptoWalletCreateOrConnectWithoutUserInput | CryptoWalletCreateOrConnectWithoutUserInput[]
    upsert?: CryptoWalletUpsertWithWhereUniqueWithoutUserInput | CryptoWalletUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CryptoWalletCreateManyUserInputEnvelope
    set?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    disconnect?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    delete?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    connect?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    update?: CryptoWalletUpdateWithWhereUniqueWithoutUserInput | CryptoWalletUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CryptoWalletUpdateManyWithWhereWithoutUserInput | CryptoWalletUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CryptoWalletScalarWhereInput | CryptoWalletScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutFrom_userNestedInput = {
    create?: XOR<TransactionCreateWithoutFrom_userInput, TransactionUncheckedCreateWithoutFrom_userInput> | TransactionCreateWithoutFrom_userInput[] | TransactionUncheckedCreateWithoutFrom_userInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutFrom_userInput | TransactionCreateOrConnectWithoutFrom_userInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutFrom_userInput | TransactionUpsertWithWhereUniqueWithoutFrom_userInput[]
    createMany?: TransactionCreateManyFrom_userInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutFrom_userInput | TransactionUpdateWithWhereUniqueWithoutFrom_userInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutFrom_userInput | TransactionUpdateManyWithWhereWithoutFrom_userInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUpdateManyWithoutTo_userNestedInput = {
    create?: XOR<TransactionCreateWithoutTo_userInput, TransactionUncheckedCreateWithoutTo_userInput> | TransactionCreateWithoutTo_userInput[] | TransactionUncheckedCreateWithoutTo_userInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutTo_userInput | TransactionCreateOrConnectWithoutTo_userInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutTo_userInput | TransactionUpsertWithWhereUniqueWithoutTo_userInput[]
    createMany?: TransactionCreateManyTo_userInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutTo_userInput | TransactionUpdateWithWhereUniqueWithoutTo_userInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutTo_userInput | TransactionUpdateManyWithWhereWithoutTo_userInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type FiatTransactionUpdateManyWithoutUserNestedInput = {
    create?: XOR<FiatTransactionCreateWithoutUserInput, FiatTransactionUncheckedCreateWithoutUserInput> | FiatTransactionCreateWithoutUserInput[] | FiatTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FiatTransactionCreateOrConnectWithoutUserInput | FiatTransactionCreateOrConnectWithoutUserInput[]
    upsert?: FiatTransactionUpsertWithWhereUniqueWithoutUserInput | FiatTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FiatTransactionCreateManyUserInputEnvelope
    set?: FiatTransactionWhereUniqueInput | FiatTransactionWhereUniqueInput[]
    disconnect?: FiatTransactionWhereUniqueInput | FiatTransactionWhereUniqueInput[]
    delete?: FiatTransactionWhereUniqueInput | FiatTransactionWhereUniqueInput[]
    connect?: FiatTransactionWhereUniqueInput | FiatTransactionWhereUniqueInput[]
    update?: FiatTransactionUpdateWithWhereUniqueWithoutUserInput | FiatTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FiatTransactionUpdateManyWithWhereWithoutUserInput | FiatTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FiatTransactionScalarWhereInput | FiatTransactionScalarWhereInput[]
  }

  export type BuyOrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<BuyOrderCreateWithoutUserInput, BuyOrderUncheckedCreateWithoutUserInput> | BuyOrderCreateWithoutUserInput[] | BuyOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyOrderCreateOrConnectWithoutUserInput | BuyOrderCreateOrConnectWithoutUserInput[]
    upsert?: BuyOrderUpsertWithWhereUniqueWithoutUserInput | BuyOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BuyOrderCreateManyUserInputEnvelope
    set?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    disconnect?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    delete?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    connect?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    update?: BuyOrderUpdateWithWhereUniqueWithoutUserInput | BuyOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BuyOrderUpdateManyWithWhereWithoutUserInput | BuyOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BuyOrderScalarWhereInput | BuyOrderScalarWhereInput[]
  }

  export type SellOrderUpdateManyWithoutUserNestedInput = {
    create?: XOR<SellOrderCreateWithoutUserInput, SellOrderUncheckedCreateWithoutUserInput> | SellOrderCreateWithoutUserInput[] | SellOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SellOrderCreateOrConnectWithoutUserInput | SellOrderCreateOrConnectWithoutUserInput[]
    upsert?: SellOrderUpsertWithWhereUniqueWithoutUserInput | SellOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SellOrderCreateManyUserInputEnvelope
    set?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    disconnect?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    delete?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    connect?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    update?: SellOrderUpdateWithWhereUniqueWithoutUserInput | SellOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SellOrderUpdateManyWithWhereWithoutUserInput | SellOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SellOrderScalarWhereInput | SellOrderScalarWhereInput[]
  }

  export type CryptoWalletUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CryptoWalletCreateWithoutUserInput, CryptoWalletUncheckedCreateWithoutUserInput> | CryptoWalletCreateWithoutUserInput[] | CryptoWalletUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CryptoWalletCreateOrConnectWithoutUserInput | CryptoWalletCreateOrConnectWithoutUserInput[]
    upsert?: CryptoWalletUpsertWithWhereUniqueWithoutUserInput | CryptoWalletUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CryptoWalletCreateManyUserInputEnvelope
    set?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    disconnect?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    delete?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    connect?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    update?: CryptoWalletUpdateWithWhereUniqueWithoutUserInput | CryptoWalletUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CryptoWalletUpdateManyWithWhereWithoutUserInput | CryptoWalletUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CryptoWalletScalarWhereInput | CryptoWalletScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutFrom_userNestedInput = {
    create?: XOR<TransactionCreateWithoutFrom_userInput, TransactionUncheckedCreateWithoutFrom_userInput> | TransactionCreateWithoutFrom_userInput[] | TransactionUncheckedCreateWithoutFrom_userInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutFrom_userInput | TransactionCreateOrConnectWithoutFrom_userInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutFrom_userInput | TransactionUpsertWithWhereUniqueWithoutFrom_userInput[]
    createMany?: TransactionCreateManyFrom_userInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutFrom_userInput | TransactionUpdateWithWhereUniqueWithoutFrom_userInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutFrom_userInput | TransactionUpdateManyWithWhereWithoutFrom_userInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutTo_userNestedInput = {
    create?: XOR<TransactionCreateWithoutTo_userInput, TransactionUncheckedCreateWithoutTo_userInput> | TransactionCreateWithoutTo_userInput[] | TransactionUncheckedCreateWithoutTo_userInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutTo_userInput | TransactionCreateOrConnectWithoutTo_userInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutTo_userInput | TransactionUpsertWithWhereUniqueWithoutTo_userInput[]
    createMany?: TransactionCreateManyTo_userInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutTo_userInput | TransactionUpdateWithWhereUniqueWithoutTo_userInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutTo_userInput | TransactionUpdateManyWithWhereWithoutTo_userInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type FiatTransactionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FiatTransactionCreateWithoutUserInput, FiatTransactionUncheckedCreateWithoutUserInput> | FiatTransactionCreateWithoutUserInput[] | FiatTransactionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FiatTransactionCreateOrConnectWithoutUserInput | FiatTransactionCreateOrConnectWithoutUserInput[]
    upsert?: FiatTransactionUpsertWithWhereUniqueWithoutUserInput | FiatTransactionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FiatTransactionCreateManyUserInputEnvelope
    set?: FiatTransactionWhereUniqueInput | FiatTransactionWhereUniqueInput[]
    disconnect?: FiatTransactionWhereUniqueInput | FiatTransactionWhereUniqueInput[]
    delete?: FiatTransactionWhereUniqueInput | FiatTransactionWhereUniqueInput[]
    connect?: FiatTransactionWhereUniqueInput | FiatTransactionWhereUniqueInput[]
    update?: FiatTransactionUpdateWithWhereUniqueWithoutUserInput | FiatTransactionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FiatTransactionUpdateManyWithWhereWithoutUserInput | FiatTransactionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FiatTransactionScalarWhereInput | FiatTransactionScalarWhereInput[]
  }

  export type BuyOrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BuyOrderCreateWithoutUserInput, BuyOrderUncheckedCreateWithoutUserInput> | BuyOrderCreateWithoutUserInput[] | BuyOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BuyOrderCreateOrConnectWithoutUserInput | BuyOrderCreateOrConnectWithoutUserInput[]
    upsert?: BuyOrderUpsertWithWhereUniqueWithoutUserInput | BuyOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BuyOrderCreateManyUserInputEnvelope
    set?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    disconnect?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    delete?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    connect?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    update?: BuyOrderUpdateWithWhereUniqueWithoutUserInput | BuyOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BuyOrderUpdateManyWithWhereWithoutUserInput | BuyOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BuyOrderScalarWhereInput | BuyOrderScalarWhereInput[]
  }

  export type SellOrderUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SellOrderCreateWithoutUserInput, SellOrderUncheckedCreateWithoutUserInput> | SellOrderCreateWithoutUserInput[] | SellOrderUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SellOrderCreateOrConnectWithoutUserInput | SellOrderCreateOrConnectWithoutUserInput[]
    upsert?: SellOrderUpsertWithWhereUniqueWithoutUserInput | SellOrderUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SellOrderCreateManyUserInputEnvelope
    set?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    disconnect?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    delete?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    connect?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    update?: SellOrderUpdateWithWhereUniqueWithoutUserInput | SellOrderUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SellOrderUpdateManyWithWhereWithoutUserInput | SellOrderUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SellOrderScalarWhereInput | SellOrderScalarWhereInput[]
  }

  export type TransactionCreateNestedManyWithoutCryptocurrencyInput = {
    create?: XOR<TransactionCreateWithoutCryptocurrencyInput, TransactionUncheckedCreateWithoutCryptocurrencyInput> | TransactionCreateWithoutCryptocurrencyInput[] | TransactionUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCryptocurrencyInput | TransactionCreateOrConnectWithoutCryptocurrencyInput[]
    createMany?: TransactionCreateManyCryptocurrencyInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type CryptoWalletCreateNestedManyWithoutCryptocurrencyInput = {
    create?: XOR<CryptoWalletCreateWithoutCryptocurrencyInput, CryptoWalletUncheckedCreateWithoutCryptocurrencyInput> | CryptoWalletCreateWithoutCryptocurrencyInput[] | CryptoWalletUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: CryptoWalletCreateOrConnectWithoutCryptocurrencyInput | CryptoWalletCreateOrConnectWithoutCryptocurrencyInput[]
    createMany?: CryptoWalletCreateManyCryptocurrencyInputEnvelope
    connect?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
  }

  export type BuyOrderCreateNestedManyWithoutCryptocurrencyInput = {
    create?: XOR<BuyOrderCreateWithoutCryptocurrencyInput, BuyOrderUncheckedCreateWithoutCryptocurrencyInput> | BuyOrderCreateWithoutCryptocurrencyInput[] | BuyOrderUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: BuyOrderCreateOrConnectWithoutCryptocurrencyInput | BuyOrderCreateOrConnectWithoutCryptocurrencyInput[]
    createMany?: BuyOrderCreateManyCryptocurrencyInputEnvelope
    connect?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
  }

  export type SellOrderCreateNestedManyWithoutCryptocurrencyInput = {
    create?: XOR<SellOrderCreateWithoutCryptocurrencyInput, SellOrderUncheckedCreateWithoutCryptocurrencyInput> | SellOrderCreateWithoutCryptocurrencyInput[] | SellOrderUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: SellOrderCreateOrConnectWithoutCryptocurrencyInput | SellOrderCreateOrConnectWithoutCryptocurrencyInput[]
    createMany?: SellOrderCreateManyCryptocurrencyInputEnvelope
    connect?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutCryptocurrencyInput = {
    create?: XOR<TransactionCreateWithoutCryptocurrencyInput, TransactionUncheckedCreateWithoutCryptocurrencyInput> | TransactionCreateWithoutCryptocurrencyInput[] | TransactionUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCryptocurrencyInput | TransactionCreateOrConnectWithoutCryptocurrencyInput[]
    createMany?: TransactionCreateManyCryptocurrencyInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type CryptoWalletUncheckedCreateNestedManyWithoutCryptocurrencyInput = {
    create?: XOR<CryptoWalletCreateWithoutCryptocurrencyInput, CryptoWalletUncheckedCreateWithoutCryptocurrencyInput> | CryptoWalletCreateWithoutCryptocurrencyInput[] | CryptoWalletUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: CryptoWalletCreateOrConnectWithoutCryptocurrencyInput | CryptoWalletCreateOrConnectWithoutCryptocurrencyInput[]
    createMany?: CryptoWalletCreateManyCryptocurrencyInputEnvelope
    connect?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
  }

  export type BuyOrderUncheckedCreateNestedManyWithoutCryptocurrencyInput = {
    create?: XOR<BuyOrderCreateWithoutCryptocurrencyInput, BuyOrderUncheckedCreateWithoutCryptocurrencyInput> | BuyOrderCreateWithoutCryptocurrencyInput[] | BuyOrderUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: BuyOrderCreateOrConnectWithoutCryptocurrencyInput | BuyOrderCreateOrConnectWithoutCryptocurrencyInput[]
    createMany?: BuyOrderCreateManyCryptocurrencyInputEnvelope
    connect?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
  }

  export type SellOrderUncheckedCreateNestedManyWithoutCryptocurrencyInput = {
    create?: XOR<SellOrderCreateWithoutCryptocurrencyInput, SellOrderUncheckedCreateWithoutCryptocurrencyInput> | SellOrderCreateWithoutCryptocurrencyInput[] | SellOrderUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: SellOrderCreateOrConnectWithoutCryptocurrencyInput | SellOrderCreateOrConnectWithoutCryptocurrencyInput[]
    createMany?: SellOrderCreateManyCryptocurrencyInputEnvelope
    connect?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
  }

  export type TransactionUpdateManyWithoutCryptocurrencyNestedInput = {
    create?: XOR<TransactionCreateWithoutCryptocurrencyInput, TransactionUncheckedCreateWithoutCryptocurrencyInput> | TransactionCreateWithoutCryptocurrencyInput[] | TransactionUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCryptocurrencyInput | TransactionCreateOrConnectWithoutCryptocurrencyInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCryptocurrencyInput | TransactionUpsertWithWhereUniqueWithoutCryptocurrencyInput[]
    createMany?: TransactionCreateManyCryptocurrencyInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCryptocurrencyInput | TransactionUpdateWithWhereUniqueWithoutCryptocurrencyInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCryptocurrencyInput | TransactionUpdateManyWithWhereWithoutCryptocurrencyInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CryptoWalletUpdateManyWithoutCryptocurrencyNestedInput = {
    create?: XOR<CryptoWalletCreateWithoutCryptocurrencyInput, CryptoWalletUncheckedCreateWithoutCryptocurrencyInput> | CryptoWalletCreateWithoutCryptocurrencyInput[] | CryptoWalletUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: CryptoWalletCreateOrConnectWithoutCryptocurrencyInput | CryptoWalletCreateOrConnectWithoutCryptocurrencyInput[]
    upsert?: CryptoWalletUpsertWithWhereUniqueWithoutCryptocurrencyInput | CryptoWalletUpsertWithWhereUniqueWithoutCryptocurrencyInput[]
    createMany?: CryptoWalletCreateManyCryptocurrencyInputEnvelope
    set?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    disconnect?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    delete?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    connect?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    update?: CryptoWalletUpdateWithWhereUniqueWithoutCryptocurrencyInput | CryptoWalletUpdateWithWhereUniqueWithoutCryptocurrencyInput[]
    updateMany?: CryptoWalletUpdateManyWithWhereWithoutCryptocurrencyInput | CryptoWalletUpdateManyWithWhereWithoutCryptocurrencyInput[]
    deleteMany?: CryptoWalletScalarWhereInput | CryptoWalletScalarWhereInput[]
  }

  export type BuyOrderUpdateManyWithoutCryptocurrencyNestedInput = {
    create?: XOR<BuyOrderCreateWithoutCryptocurrencyInput, BuyOrderUncheckedCreateWithoutCryptocurrencyInput> | BuyOrderCreateWithoutCryptocurrencyInput[] | BuyOrderUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: BuyOrderCreateOrConnectWithoutCryptocurrencyInput | BuyOrderCreateOrConnectWithoutCryptocurrencyInput[]
    upsert?: BuyOrderUpsertWithWhereUniqueWithoutCryptocurrencyInput | BuyOrderUpsertWithWhereUniqueWithoutCryptocurrencyInput[]
    createMany?: BuyOrderCreateManyCryptocurrencyInputEnvelope
    set?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    disconnect?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    delete?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    connect?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    update?: BuyOrderUpdateWithWhereUniqueWithoutCryptocurrencyInput | BuyOrderUpdateWithWhereUniqueWithoutCryptocurrencyInput[]
    updateMany?: BuyOrderUpdateManyWithWhereWithoutCryptocurrencyInput | BuyOrderUpdateManyWithWhereWithoutCryptocurrencyInput[]
    deleteMany?: BuyOrderScalarWhereInput | BuyOrderScalarWhereInput[]
  }

  export type SellOrderUpdateManyWithoutCryptocurrencyNestedInput = {
    create?: XOR<SellOrderCreateWithoutCryptocurrencyInput, SellOrderUncheckedCreateWithoutCryptocurrencyInput> | SellOrderCreateWithoutCryptocurrencyInput[] | SellOrderUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: SellOrderCreateOrConnectWithoutCryptocurrencyInput | SellOrderCreateOrConnectWithoutCryptocurrencyInput[]
    upsert?: SellOrderUpsertWithWhereUniqueWithoutCryptocurrencyInput | SellOrderUpsertWithWhereUniqueWithoutCryptocurrencyInput[]
    createMany?: SellOrderCreateManyCryptocurrencyInputEnvelope
    set?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    disconnect?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    delete?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    connect?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    update?: SellOrderUpdateWithWhereUniqueWithoutCryptocurrencyInput | SellOrderUpdateWithWhereUniqueWithoutCryptocurrencyInput[]
    updateMany?: SellOrderUpdateManyWithWhereWithoutCryptocurrencyInput | SellOrderUpdateManyWithWhereWithoutCryptocurrencyInput[]
    deleteMany?: SellOrderScalarWhereInput | SellOrderScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutCryptocurrencyNestedInput = {
    create?: XOR<TransactionCreateWithoutCryptocurrencyInput, TransactionUncheckedCreateWithoutCryptocurrencyInput> | TransactionCreateWithoutCryptocurrencyInput[] | TransactionUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCryptocurrencyInput | TransactionCreateOrConnectWithoutCryptocurrencyInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCryptocurrencyInput | TransactionUpsertWithWhereUniqueWithoutCryptocurrencyInput[]
    createMany?: TransactionCreateManyCryptocurrencyInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCryptocurrencyInput | TransactionUpdateWithWhereUniqueWithoutCryptocurrencyInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCryptocurrencyInput | TransactionUpdateManyWithWhereWithoutCryptocurrencyInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CryptoWalletUncheckedUpdateManyWithoutCryptocurrencyNestedInput = {
    create?: XOR<CryptoWalletCreateWithoutCryptocurrencyInput, CryptoWalletUncheckedCreateWithoutCryptocurrencyInput> | CryptoWalletCreateWithoutCryptocurrencyInput[] | CryptoWalletUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: CryptoWalletCreateOrConnectWithoutCryptocurrencyInput | CryptoWalletCreateOrConnectWithoutCryptocurrencyInput[]
    upsert?: CryptoWalletUpsertWithWhereUniqueWithoutCryptocurrencyInput | CryptoWalletUpsertWithWhereUniqueWithoutCryptocurrencyInput[]
    createMany?: CryptoWalletCreateManyCryptocurrencyInputEnvelope
    set?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    disconnect?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    delete?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    connect?: CryptoWalletWhereUniqueInput | CryptoWalletWhereUniqueInput[]
    update?: CryptoWalletUpdateWithWhereUniqueWithoutCryptocurrencyInput | CryptoWalletUpdateWithWhereUniqueWithoutCryptocurrencyInput[]
    updateMany?: CryptoWalletUpdateManyWithWhereWithoutCryptocurrencyInput | CryptoWalletUpdateManyWithWhereWithoutCryptocurrencyInput[]
    deleteMany?: CryptoWalletScalarWhereInput | CryptoWalletScalarWhereInput[]
  }

  export type BuyOrderUncheckedUpdateManyWithoutCryptocurrencyNestedInput = {
    create?: XOR<BuyOrderCreateWithoutCryptocurrencyInput, BuyOrderUncheckedCreateWithoutCryptocurrencyInput> | BuyOrderCreateWithoutCryptocurrencyInput[] | BuyOrderUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: BuyOrderCreateOrConnectWithoutCryptocurrencyInput | BuyOrderCreateOrConnectWithoutCryptocurrencyInput[]
    upsert?: BuyOrderUpsertWithWhereUniqueWithoutCryptocurrencyInput | BuyOrderUpsertWithWhereUniqueWithoutCryptocurrencyInput[]
    createMany?: BuyOrderCreateManyCryptocurrencyInputEnvelope
    set?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    disconnect?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    delete?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    connect?: BuyOrderWhereUniqueInput | BuyOrderWhereUniqueInput[]
    update?: BuyOrderUpdateWithWhereUniqueWithoutCryptocurrencyInput | BuyOrderUpdateWithWhereUniqueWithoutCryptocurrencyInput[]
    updateMany?: BuyOrderUpdateManyWithWhereWithoutCryptocurrencyInput | BuyOrderUpdateManyWithWhereWithoutCryptocurrencyInput[]
    deleteMany?: BuyOrderScalarWhereInput | BuyOrderScalarWhereInput[]
  }

  export type SellOrderUncheckedUpdateManyWithoutCryptocurrencyNestedInput = {
    create?: XOR<SellOrderCreateWithoutCryptocurrencyInput, SellOrderUncheckedCreateWithoutCryptocurrencyInput> | SellOrderCreateWithoutCryptocurrencyInput[] | SellOrderUncheckedCreateWithoutCryptocurrencyInput[]
    connectOrCreate?: SellOrderCreateOrConnectWithoutCryptocurrencyInput | SellOrderCreateOrConnectWithoutCryptocurrencyInput[]
    upsert?: SellOrderUpsertWithWhereUniqueWithoutCryptocurrencyInput | SellOrderUpsertWithWhereUniqueWithoutCryptocurrencyInput[]
    createMany?: SellOrderCreateManyCryptocurrencyInputEnvelope
    set?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    disconnect?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    delete?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    connect?: SellOrderWhereUniqueInput | SellOrderWhereUniqueInput[]
    update?: SellOrderUpdateWithWhereUniqueWithoutCryptocurrencyInput | SellOrderUpdateWithWhereUniqueWithoutCryptocurrencyInput[]
    updateMany?: SellOrderUpdateManyWithWhereWithoutCryptocurrencyInput | SellOrderUpdateManyWithWhereWithoutCryptocurrencyInput[]
    deleteMany?: SellOrderScalarWhereInput | SellOrderScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCrypto_walletInput = {
    create?: XOR<UserCreateWithoutCrypto_walletInput, UserUncheckedCreateWithoutCrypto_walletInput>
    connectOrCreate?: UserCreateOrConnectWithoutCrypto_walletInput
    connect?: UserWhereUniqueInput
  }

  export type CryptocurrencyCreateNestedOneWithoutCrypto_walletInput = {
    create?: XOR<CryptocurrencyCreateWithoutCrypto_walletInput, CryptocurrencyUncheckedCreateWithoutCrypto_walletInput>
    connectOrCreate?: CryptocurrencyCreateOrConnectWithoutCrypto_walletInput
    connect?: CryptocurrencyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCrypto_walletNestedInput = {
    create?: XOR<UserCreateWithoutCrypto_walletInput, UserUncheckedCreateWithoutCrypto_walletInput>
    connectOrCreate?: UserCreateOrConnectWithoutCrypto_walletInput
    upsert?: UserUpsertWithoutCrypto_walletInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCrypto_walletInput, UserUpdateWithoutCrypto_walletInput>, UserUncheckedUpdateWithoutCrypto_walletInput>
  }

  export type CryptocurrencyUpdateOneRequiredWithoutCrypto_walletNestedInput = {
    create?: XOR<CryptocurrencyCreateWithoutCrypto_walletInput, CryptocurrencyUncheckedCreateWithoutCrypto_walletInput>
    connectOrCreate?: CryptocurrencyCreateOrConnectWithoutCrypto_walletInput
    upsert?: CryptocurrencyUpsertWithoutCrypto_walletInput
    connect?: CryptocurrencyWhereUniqueInput
    update?: XOR<XOR<CryptocurrencyUpdateToOneWithWhereWithoutCrypto_walletInput, CryptocurrencyUpdateWithoutCrypto_walletInput>, CryptocurrencyUncheckedUpdateWithoutCrypto_walletInput>
  }

  export type UserCreateNestedOneWithoutFiatTransactionInput = {
    create?: XOR<UserCreateWithoutFiatTransactionInput, UserUncheckedCreateWithoutFiatTransactionInput>
    connectOrCreate?: UserCreateOrConnectWithoutFiatTransactionInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutFiatTransactionNestedInput = {
    create?: XOR<UserCreateWithoutFiatTransactionInput, UserUncheckedCreateWithoutFiatTransactionInput>
    connectOrCreate?: UserCreateOrConnectWithoutFiatTransactionInput
    upsert?: UserUpsertWithoutFiatTransactionInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFiatTransactionInput, UserUpdateWithoutFiatTransactionInput>, UserUncheckedUpdateWithoutFiatTransactionInput>
  }

  export type UserCreateNestedOneWithoutBuy_ordersInput = {
    create?: XOR<UserCreateWithoutBuy_ordersInput, UserUncheckedCreateWithoutBuy_ordersInput>
    connectOrCreate?: UserCreateOrConnectWithoutBuy_ordersInput
    connect?: UserWhereUniqueInput
  }

  export type CryptocurrencyCreateNestedOneWithoutBuy_ordersInput = {
    create?: XOR<CryptocurrencyCreateWithoutBuy_ordersInput, CryptocurrencyUncheckedCreateWithoutBuy_ordersInput>
    connectOrCreate?: CryptocurrencyCreateOrConnectWithoutBuy_ordersInput
    connect?: CryptocurrencyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBuy_ordersNestedInput = {
    create?: XOR<UserCreateWithoutBuy_ordersInput, UserUncheckedCreateWithoutBuy_ordersInput>
    connectOrCreate?: UserCreateOrConnectWithoutBuy_ordersInput
    upsert?: UserUpsertWithoutBuy_ordersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBuy_ordersInput, UserUpdateWithoutBuy_ordersInput>, UserUncheckedUpdateWithoutBuy_ordersInput>
  }

  export type CryptocurrencyUpdateOneRequiredWithoutBuy_ordersNestedInput = {
    create?: XOR<CryptocurrencyCreateWithoutBuy_ordersInput, CryptocurrencyUncheckedCreateWithoutBuy_ordersInput>
    connectOrCreate?: CryptocurrencyCreateOrConnectWithoutBuy_ordersInput
    upsert?: CryptocurrencyUpsertWithoutBuy_ordersInput
    connect?: CryptocurrencyWhereUniqueInput
    update?: XOR<XOR<CryptocurrencyUpdateToOneWithWhereWithoutBuy_ordersInput, CryptocurrencyUpdateWithoutBuy_ordersInput>, CryptocurrencyUncheckedUpdateWithoutBuy_ordersInput>
  }

  export type UserCreateNestedOneWithoutSell_ordersInput = {
    create?: XOR<UserCreateWithoutSell_ordersInput, UserUncheckedCreateWithoutSell_ordersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSell_ordersInput
    connect?: UserWhereUniqueInput
  }

  export type CryptocurrencyCreateNestedOneWithoutSell_ordersInput = {
    create?: XOR<CryptocurrencyCreateWithoutSell_ordersInput, CryptocurrencyUncheckedCreateWithoutSell_ordersInput>
    connectOrCreate?: CryptocurrencyCreateOrConnectWithoutSell_ordersInput
    connect?: CryptocurrencyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSell_ordersNestedInput = {
    create?: XOR<UserCreateWithoutSell_ordersInput, UserUncheckedCreateWithoutSell_ordersInput>
    connectOrCreate?: UserCreateOrConnectWithoutSell_ordersInput
    upsert?: UserUpsertWithoutSell_ordersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSell_ordersInput, UserUpdateWithoutSell_ordersInput>, UserUncheckedUpdateWithoutSell_ordersInput>
  }

  export type CryptocurrencyUpdateOneRequiredWithoutSell_ordersNestedInput = {
    create?: XOR<CryptocurrencyCreateWithoutSell_ordersInput, CryptocurrencyUncheckedCreateWithoutSell_ordersInput>
    connectOrCreate?: CryptocurrencyCreateOrConnectWithoutSell_ordersInput
    upsert?: CryptocurrencyUpsertWithoutSell_ordersInput
    connect?: CryptocurrencyWhereUniqueInput
    update?: XOR<XOR<CryptocurrencyUpdateToOneWithWhereWithoutSell_ordersInput, CryptocurrencyUpdateWithoutSell_ordersInput>, CryptocurrencyUncheckedUpdateWithoutSell_ordersInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserCreateWithoutTransactionsInput = {
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    crypto_wallet?: CryptoWalletCreateNestedManyWithoutUserInput
    receivedTransactions?: TransactionCreateNestedManyWithoutTo_userInput
    fiatTransaction?: FiatTransactionCreateNestedManyWithoutUserInput
    buy_orders?: BuyOrderCreateNestedManyWithoutUserInput
    sell_orders?: SellOrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTransactionsInput = {
    user_id?: number
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    crypto_wallet?: CryptoWalletUncheckedCreateNestedManyWithoutUserInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutTo_userInput
    fiatTransaction?: FiatTransactionUncheckedCreateNestedManyWithoutUserInput
    buy_orders?: BuyOrderUncheckedCreateNestedManyWithoutUserInput
    sell_orders?: SellOrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type UserCreateWithoutReceivedTransactionsInput = {
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    crypto_wallet?: CryptoWalletCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutFrom_userInput
    fiatTransaction?: FiatTransactionCreateNestedManyWithoutUserInput
    buy_orders?: BuyOrderCreateNestedManyWithoutUserInput
    sell_orders?: SellOrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReceivedTransactionsInput = {
    user_id?: number
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    crypto_wallet?: CryptoWalletUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutFrom_userInput
    fiatTransaction?: FiatTransactionUncheckedCreateNestedManyWithoutUserInput
    buy_orders?: BuyOrderUncheckedCreateNestedManyWithoutUserInput
    sell_orders?: SellOrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReceivedTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReceivedTransactionsInput, UserUncheckedCreateWithoutReceivedTransactionsInput>
  }

  export type CryptocurrencyCreateWithoutTransactionsInput = {
    name: string
    symbol: string
    price_usd: number
    crypto_wallet?: CryptoWalletCreateNestedManyWithoutCryptocurrencyInput
    buy_orders?: BuyOrderCreateNestedManyWithoutCryptocurrencyInput
    sell_orders?: SellOrderCreateNestedManyWithoutCryptocurrencyInput
  }

  export type CryptocurrencyUncheckedCreateWithoutTransactionsInput = {
    crypto_id?: number
    name: string
    symbol: string
    price_usd: number
    crypto_wallet?: CryptoWalletUncheckedCreateNestedManyWithoutCryptocurrencyInput
    buy_orders?: BuyOrderUncheckedCreateNestedManyWithoutCryptocurrencyInput
    sell_orders?: SellOrderUncheckedCreateNestedManyWithoutCryptocurrencyInput
  }

  export type CryptocurrencyCreateOrConnectWithoutTransactionsInput = {
    where: CryptocurrencyWhereUniqueInput
    create: XOR<CryptocurrencyCreateWithoutTransactionsInput, CryptocurrencyUncheckedCreateWithoutTransactionsInput>
  }

  export type UserUpsertWithoutTransactionsInput = {
    update: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type UserUpdateWithoutTransactionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUpdateManyWithoutUserNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutTo_userNestedInput
    fiatTransaction?: FiatTransactionUpdateManyWithoutUserNestedInput
    buy_orders?: BuyOrderUpdateManyWithoutUserNestedInput
    sell_orders?: SellOrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTransactionsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUncheckedUpdateManyWithoutUserNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutTo_userNestedInput
    fiatTransaction?: FiatTransactionUncheckedUpdateManyWithoutUserNestedInput
    buy_orders?: BuyOrderUncheckedUpdateManyWithoutUserNestedInput
    sell_orders?: SellOrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutReceivedTransactionsInput = {
    update: XOR<UserUpdateWithoutReceivedTransactionsInput, UserUncheckedUpdateWithoutReceivedTransactionsInput>
    create: XOR<UserCreateWithoutReceivedTransactionsInput, UserUncheckedCreateWithoutReceivedTransactionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReceivedTransactionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReceivedTransactionsInput, UserUncheckedUpdateWithoutReceivedTransactionsInput>
  }

  export type UserUpdateWithoutReceivedTransactionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutFrom_userNestedInput
    fiatTransaction?: FiatTransactionUpdateManyWithoutUserNestedInput
    buy_orders?: BuyOrderUpdateManyWithoutUserNestedInput
    sell_orders?: SellOrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReceivedTransactionsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutFrom_userNestedInput
    fiatTransaction?: FiatTransactionUncheckedUpdateManyWithoutUserNestedInput
    buy_orders?: BuyOrderUncheckedUpdateManyWithoutUserNestedInput
    sell_orders?: SellOrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CryptocurrencyUpsertWithoutTransactionsInput = {
    update: XOR<CryptocurrencyUpdateWithoutTransactionsInput, CryptocurrencyUncheckedUpdateWithoutTransactionsInput>
    create: XOR<CryptocurrencyCreateWithoutTransactionsInput, CryptocurrencyUncheckedCreateWithoutTransactionsInput>
    where?: CryptocurrencyWhereInput
  }

  export type CryptocurrencyUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: CryptocurrencyWhereInput
    data: XOR<CryptocurrencyUpdateWithoutTransactionsInput, CryptocurrencyUncheckedUpdateWithoutTransactionsInput>
  }

  export type CryptocurrencyUpdateWithoutTransactionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    price_usd?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUpdateManyWithoutCryptocurrencyNestedInput
    buy_orders?: BuyOrderUpdateManyWithoutCryptocurrencyNestedInput
    sell_orders?: SellOrderUpdateManyWithoutCryptocurrencyNestedInput
  }

  export type CryptocurrencyUncheckedUpdateWithoutTransactionsInput = {
    crypto_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    price_usd?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUncheckedUpdateManyWithoutCryptocurrencyNestedInput
    buy_orders?: BuyOrderUncheckedUpdateManyWithoutCryptocurrencyNestedInput
    sell_orders?: SellOrderUncheckedUpdateManyWithoutCryptocurrencyNestedInput
  }

  export type CryptoWalletCreateWithoutUserInput = {
    balance?: number
    cryptocurrency: CryptocurrencyCreateNestedOneWithoutCrypto_walletInput
  }

  export type CryptoWalletUncheckedCreateWithoutUserInput = {
    wallet_id?: number
    crypto_id: number
    balance?: number
  }

  export type CryptoWalletCreateOrConnectWithoutUserInput = {
    where: CryptoWalletWhereUniqueInput
    create: XOR<CryptoWalletCreateWithoutUserInput, CryptoWalletUncheckedCreateWithoutUserInput>
  }

  export type CryptoWalletCreateManyUserInputEnvelope = {
    data: CryptoWalletCreateManyUserInput | CryptoWalletCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutFrom_userInput = {
    amount: number
    fiat_amount: number
    status?: string
    transaction_type: string
    timestamp?: Date | string
    to_user: UserCreateNestedOneWithoutReceivedTransactionsInput
    cryptocurrency: CryptocurrencyCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutFrom_userInput = {
    transaction_id?: number
    to_user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    transaction_type: string
    timestamp?: Date | string
  }

  export type TransactionCreateOrConnectWithoutFrom_userInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutFrom_userInput, TransactionUncheckedCreateWithoutFrom_userInput>
  }

  export type TransactionCreateManyFrom_userInputEnvelope = {
    data: TransactionCreateManyFrom_userInput | TransactionCreateManyFrom_userInput[]
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutTo_userInput = {
    amount: number
    fiat_amount: number
    status?: string
    transaction_type: string
    timestamp?: Date | string
    from_user: UserCreateNestedOneWithoutTransactionsInput
    cryptocurrency: CryptocurrencyCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutTo_userInput = {
    transaction_id?: number
    from_user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    transaction_type: string
    timestamp?: Date | string
  }

  export type TransactionCreateOrConnectWithoutTo_userInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutTo_userInput, TransactionUncheckedCreateWithoutTo_userInput>
  }

  export type TransactionCreateManyTo_userInputEnvelope = {
    data: TransactionCreateManyTo_userInput | TransactionCreateManyTo_userInput[]
    skipDuplicates?: boolean
  }

  export type FiatTransactionCreateWithoutUserInput = {
    amount: number
    fiat_type: string
    transaction_type: string
    transaction_date?: Date | string
  }

  export type FiatTransactionUncheckedCreateWithoutUserInput = {
    fiat_transaction_id?: number
    amount: number
    fiat_type: string
    transaction_type: string
    transaction_date?: Date | string
  }

  export type FiatTransactionCreateOrConnectWithoutUserInput = {
    where: FiatTransactionWhereUniqueInput
    create: XOR<FiatTransactionCreateWithoutUserInput, FiatTransactionUncheckedCreateWithoutUserInput>
  }

  export type FiatTransactionCreateManyUserInputEnvelope = {
    data: FiatTransactionCreateManyUserInput | FiatTransactionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BuyOrderCreateWithoutUserInput = {
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
    cryptocurrency: CryptocurrencyCreateNestedOneWithoutBuy_ordersInput
  }

  export type BuyOrderUncheckedCreateWithoutUserInput = {
    buy_order_id?: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
  }

  export type BuyOrderCreateOrConnectWithoutUserInput = {
    where: BuyOrderWhereUniqueInput
    create: XOR<BuyOrderCreateWithoutUserInput, BuyOrderUncheckedCreateWithoutUserInput>
  }

  export type BuyOrderCreateManyUserInputEnvelope = {
    data: BuyOrderCreateManyUserInput | BuyOrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SellOrderCreateWithoutUserInput = {
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
    cryptocurrency: CryptocurrencyCreateNestedOneWithoutSell_ordersInput
  }

  export type SellOrderUncheckedCreateWithoutUserInput = {
    sell_order_id?: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
  }

  export type SellOrderCreateOrConnectWithoutUserInput = {
    where: SellOrderWhereUniqueInput
    create: XOR<SellOrderCreateWithoutUserInput, SellOrderUncheckedCreateWithoutUserInput>
  }

  export type SellOrderCreateManyUserInputEnvelope = {
    data: SellOrderCreateManyUserInput | SellOrderCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CryptoWalletUpsertWithWhereUniqueWithoutUserInput = {
    where: CryptoWalletWhereUniqueInput
    update: XOR<CryptoWalletUpdateWithoutUserInput, CryptoWalletUncheckedUpdateWithoutUserInput>
    create: XOR<CryptoWalletCreateWithoutUserInput, CryptoWalletUncheckedCreateWithoutUserInput>
  }

  export type CryptoWalletUpdateWithWhereUniqueWithoutUserInput = {
    where: CryptoWalletWhereUniqueInput
    data: XOR<CryptoWalletUpdateWithoutUserInput, CryptoWalletUncheckedUpdateWithoutUserInput>
  }

  export type CryptoWalletUpdateManyWithWhereWithoutUserInput = {
    where: CryptoWalletScalarWhereInput
    data: XOR<CryptoWalletUpdateManyMutationInput, CryptoWalletUncheckedUpdateManyWithoutUserInput>
  }

  export type CryptoWalletScalarWhereInput = {
    AND?: CryptoWalletScalarWhereInput | CryptoWalletScalarWhereInput[]
    OR?: CryptoWalletScalarWhereInput[]
    NOT?: CryptoWalletScalarWhereInput | CryptoWalletScalarWhereInput[]
    wallet_id?: IntFilter<"CryptoWallet"> | number
    user_id?: IntFilter<"CryptoWallet"> | number
    crypto_id?: IntFilter<"CryptoWallet"> | number
    balance?: FloatFilter<"CryptoWallet"> | number
  }

  export type TransactionUpsertWithWhereUniqueWithoutFrom_userInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutFrom_userInput, TransactionUncheckedUpdateWithoutFrom_userInput>
    create: XOR<TransactionCreateWithoutFrom_userInput, TransactionUncheckedCreateWithoutFrom_userInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutFrom_userInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutFrom_userInput, TransactionUncheckedUpdateWithoutFrom_userInput>
  }

  export type TransactionUpdateManyWithWhereWithoutFrom_userInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutFrom_userInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    transaction_id?: IntFilter<"Transaction"> | number
    from_user_id?: IntFilter<"Transaction"> | number
    to_user_id?: IntFilter<"Transaction"> | number
    crypto_id?: IntFilter<"Transaction"> | number
    amount?: FloatFilter<"Transaction"> | number
    fiat_amount?: FloatFilter<"Transaction"> | number
    status?: StringFilter<"Transaction"> | string
    transaction_type?: StringFilter<"Transaction"> | string
    timestamp?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutTo_userInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutTo_userInput, TransactionUncheckedUpdateWithoutTo_userInput>
    create: XOR<TransactionCreateWithoutTo_userInput, TransactionUncheckedCreateWithoutTo_userInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutTo_userInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutTo_userInput, TransactionUncheckedUpdateWithoutTo_userInput>
  }

  export type TransactionUpdateManyWithWhereWithoutTo_userInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTo_userInput>
  }

  export type FiatTransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: FiatTransactionWhereUniqueInput
    update: XOR<FiatTransactionUpdateWithoutUserInput, FiatTransactionUncheckedUpdateWithoutUserInput>
    create: XOR<FiatTransactionCreateWithoutUserInput, FiatTransactionUncheckedCreateWithoutUserInput>
  }

  export type FiatTransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: FiatTransactionWhereUniqueInput
    data: XOR<FiatTransactionUpdateWithoutUserInput, FiatTransactionUncheckedUpdateWithoutUserInput>
  }

  export type FiatTransactionUpdateManyWithWhereWithoutUserInput = {
    where: FiatTransactionScalarWhereInput
    data: XOR<FiatTransactionUpdateManyMutationInput, FiatTransactionUncheckedUpdateManyWithoutUserInput>
  }

  export type FiatTransactionScalarWhereInput = {
    AND?: FiatTransactionScalarWhereInput | FiatTransactionScalarWhereInput[]
    OR?: FiatTransactionScalarWhereInput[]
    NOT?: FiatTransactionScalarWhereInput | FiatTransactionScalarWhereInput[]
    fiat_transaction_id?: IntFilter<"FiatTransaction"> | number
    user_id?: IntFilter<"FiatTransaction"> | number
    amount?: FloatFilter<"FiatTransaction"> | number
    fiat_type?: StringFilter<"FiatTransaction"> | string
    transaction_type?: StringFilter<"FiatTransaction"> | string
    transaction_date?: DateTimeFilter<"FiatTransaction"> | Date | string
  }

  export type BuyOrderUpsertWithWhereUniqueWithoutUserInput = {
    where: BuyOrderWhereUniqueInput
    update: XOR<BuyOrderUpdateWithoutUserInput, BuyOrderUncheckedUpdateWithoutUserInput>
    create: XOR<BuyOrderCreateWithoutUserInput, BuyOrderUncheckedCreateWithoutUserInput>
  }

  export type BuyOrderUpdateWithWhereUniqueWithoutUserInput = {
    where: BuyOrderWhereUniqueInput
    data: XOR<BuyOrderUpdateWithoutUserInput, BuyOrderUncheckedUpdateWithoutUserInput>
  }

  export type BuyOrderUpdateManyWithWhereWithoutUserInput = {
    where: BuyOrderScalarWhereInput
    data: XOR<BuyOrderUpdateManyMutationInput, BuyOrderUncheckedUpdateManyWithoutUserInput>
  }

  export type BuyOrderScalarWhereInput = {
    AND?: BuyOrderScalarWhereInput | BuyOrderScalarWhereInput[]
    OR?: BuyOrderScalarWhereInput[]
    NOT?: BuyOrderScalarWhereInput | BuyOrderScalarWhereInput[]
    buy_order_id?: IntFilter<"BuyOrder"> | number
    user_id?: IntFilter<"BuyOrder"> | number
    crypto_id?: IntFilter<"BuyOrder"> | number
    amount?: FloatFilter<"BuyOrder"> | number
    fiat_amount?: FloatFilter<"BuyOrder"> | number
    status?: StringFilter<"BuyOrder"> | string
    timestamp?: DateTimeFilter<"BuyOrder"> | Date | string
  }

  export type SellOrderUpsertWithWhereUniqueWithoutUserInput = {
    where: SellOrderWhereUniqueInput
    update: XOR<SellOrderUpdateWithoutUserInput, SellOrderUncheckedUpdateWithoutUserInput>
    create: XOR<SellOrderCreateWithoutUserInput, SellOrderUncheckedCreateWithoutUserInput>
  }

  export type SellOrderUpdateWithWhereUniqueWithoutUserInput = {
    where: SellOrderWhereUniqueInput
    data: XOR<SellOrderUpdateWithoutUserInput, SellOrderUncheckedUpdateWithoutUserInput>
  }

  export type SellOrderUpdateManyWithWhereWithoutUserInput = {
    where: SellOrderScalarWhereInput
    data: XOR<SellOrderUpdateManyMutationInput, SellOrderUncheckedUpdateManyWithoutUserInput>
  }

  export type SellOrderScalarWhereInput = {
    AND?: SellOrderScalarWhereInput | SellOrderScalarWhereInput[]
    OR?: SellOrderScalarWhereInput[]
    NOT?: SellOrderScalarWhereInput | SellOrderScalarWhereInput[]
    sell_order_id?: IntFilter<"SellOrder"> | number
    user_id?: IntFilter<"SellOrder"> | number
    crypto_id?: IntFilter<"SellOrder"> | number
    amount?: FloatFilter<"SellOrder"> | number
    fiat_amount?: FloatFilter<"SellOrder"> | number
    status?: StringFilter<"SellOrder"> | string
    timestamp?: DateTimeFilter<"SellOrder"> | Date | string
  }

  export type TransactionCreateWithoutCryptocurrencyInput = {
    amount: number
    fiat_amount: number
    status?: string
    transaction_type: string
    timestamp?: Date | string
    from_user: UserCreateNestedOneWithoutTransactionsInput
    to_user: UserCreateNestedOneWithoutReceivedTransactionsInput
  }

  export type TransactionUncheckedCreateWithoutCryptocurrencyInput = {
    transaction_id?: number
    from_user_id: number
    to_user_id: number
    amount: number
    fiat_amount: number
    status?: string
    transaction_type: string
    timestamp?: Date | string
  }

  export type TransactionCreateOrConnectWithoutCryptocurrencyInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutCryptocurrencyInput, TransactionUncheckedCreateWithoutCryptocurrencyInput>
  }

  export type TransactionCreateManyCryptocurrencyInputEnvelope = {
    data: TransactionCreateManyCryptocurrencyInput | TransactionCreateManyCryptocurrencyInput[]
    skipDuplicates?: boolean
  }

  export type CryptoWalletCreateWithoutCryptocurrencyInput = {
    balance?: number
    user: UserCreateNestedOneWithoutCrypto_walletInput
  }

  export type CryptoWalletUncheckedCreateWithoutCryptocurrencyInput = {
    wallet_id?: number
    user_id: number
    balance?: number
  }

  export type CryptoWalletCreateOrConnectWithoutCryptocurrencyInput = {
    where: CryptoWalletWhereUniqueInput
    create: XOR<CryptoWalletCreateWithoutCryptocurrencyInput, CryptoWalletUncheckedCreateWithoutCryptocurrencyInput>
  }

  export type CryptoWalletCreateManyCryptocurrencyInputEnvelope = {
    data: CryptoWalletCreateManyCryptocurrencyInput | CryptoWalletCreateManyCryptocurrencyInput[]
    skipDuplicates?: boolean
  }

  export type BuyOrderCreateWithoutCryptocurrencyInput = {
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutBuy_ordersInput
  }

  export type BuyOrderUncheckedCreateWithoutCryptocurrencyInput = {
    buy_order_id?: number
    user_id: number
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
  }

  export type BuyOrderCreateOrConnectWithoutCryptocurrencyInput = {
    where: BuyOrderWhereUniqueInput
    create: XOR<BuyOrderCreateWithoutCryptocurrencyInput, BuyOrderUncheckedCreateWithoutCryptocurrencyInput>
  }

  export type BuyOrderCreateManyCryptocurrencyInputEnvelope = {
    data: BuyOrderCreateManyCryptocurrencyInput | BuyOrderCreateManyCryptocurrencyInput[]
    skipDuplicates?: boolean
  }

  export type SellOrderCreateWithoutCryptocurrencyInput = {
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
    user: UserCreateNestedOneWithoutSell_ordersInput
  }

  export type SellOrderUncheckedCreateWithoutCryptocurrencyInput = {
    sell_order_id?: number
    user_id: number
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
  }

  export type SellOrderCreateOrConnectWithoutCryptocurrencyInput = {
    where: SellOrderWhereUniqueInput
    create: XOR<SellOrderCreateWithoutCryptocurrencyInput, SellOrderUncheckedCreateWithoutCryptocurrencyInput>
  }

  export type SellOrderCreateManyCryptocurrencyInputEnvelope = {
    data: SellOrderCreateManyCryptocurrencyInput | SellOrderCreateManyCryptocurrencyInput[]
    skipDuplicates?: boolean
  }

  export type TransactionUpsertWithWhereUniqueWithoutCryptocurrencyInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutCryptocurrencyInput, TransactionUncheckedUpdateWithoutCryptocurrencyInput>
    create: XOR<TransactionCreateWithoutCryptocurrencyInput, TransactionUncheckedCreateWithoutCryptocurrencyInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutCryptocurrencyInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutCryptocurrencyInput, TransactionUncheckedUpdateWithoutCryptocurrencyInput>
  }

  export type TransactionUpdateManyWithWhereWithoutCryptocurrencyInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutCryptocurrencyInput>
  }

  export type CryptoWalletUpsertWithWhereUniqueWithoutCryptocurrencyInput = {
    where: CryptoWalletWhereUniqueInput
    update: XOR<CryptoWalletUpdateWithoutCryptocurrencyInput, CryptoWalletUncheckedUpdateWithoutCryptocurrencyInput>
    create: XOR<CryptoWalletCreateWithoutCryptocurrencyInput, CryptoWalletUncheckedCreateWithoutCryptocurrencyInput>
  }

  export type CryptoWalletUpdateWithWhereUniqueWithoutCryptocurrencyInput = {
    where: CryptoWalletWhereUniqueInput
    data: XOR<CryptoWalletUpdateWithoutCryptocurrencyInput, CryptoWalletUncheckedUpdateWithoutCryptocurrencyInput>
  }

  export type CryptoWalletUpdateManyWithWhereWithoutCryptocurrencyInput = {
    where: CryptoWalletScalarWhereInput
    data: XOR<CryptoWalletUpdateManyMutationInput, CryptoWalletUncheckedUpdateManyWithoutCryptocurrencyInput>
  }

  export type BuyOrderUpsertWithWhereUniqueWithoutCryptocurrencyInput = {
    where: BuyOrderWhereUniqueInput
    update: XOR<BuyOrderUpdateWithoutCryptocurrencyInput, BuyOrderUncheckedUpdateWithoutCryptocurrencyInput>
    create: XOR<BuyOrderCreateWithoutCryptocurrencyInput, BuyOrderUncheckedCreateWithoutCryptocurrencyInput>
  }

  export type BuyOrderUpdateWithWhereUniqueWithoutCryptocurrencyInput = {
    where: BuyOrderWhereUniqueInput
    data: XOR<BuyOrderUpdateWithoutCryptocurrencyInput, BuyOrderUncheckedUpdateWithoutCryptocurrencyInput>
  }

  export type BuyOrderUpdateManyWithWhereWithoutCryptocurrencyInput = {
    where: BuyOrderScalarWhereInput
    data: XOR<BuyOrderUpdateManyMutationInput, BuyOrderUncheckedUpdateManyWithoutCryptocurrencyInput>
  }

  export type SellOrderUpsertWithWhereUniqueWithoutCryptocurrencyInput = {
    where: SellOrderWhereUniqueInput
    update: XOR<SellOrderUpdateWithoutCryptocurrencyInput, SellOrderUncheckedUpdateWithoutCryptocurrencyInput>
    create: XOR<SellOrderCreateWithoutCryptocurrencyInput, SellOrderUncheckedCreateWithoutCryptocurrencyInput>
  }

  export type SellOrderUpdateWithWhereUniqueWithoutCryptocurrencyInput = {
    where: SellOrderWhereUniqueInput
    data: XOR<SellOrderUpdateWithoutCryptocurrencyInput, SellOrderUncheckedUpdateWithoutCryptocurrencyInput>
  }

  export type SellOrderUpdateManyWithWhereWithoutCryptocurrencyInput = {
    where: SellOrderScalarWhereInput
    data: XOR<SellOrderUpdateManyMutationInput, SellOrderUncheckedUpdateManyWithoutCryptocurrencyInput>
  }

  export type UserCreateWithoutCrypto_walletInput = {
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    transactions?: TransactionCreateNestedManyWithoutFrom_userInput
    receivedTransactions?: TransactionCreateNestedManyWithoutTo_userInput
    fiatTransaction?: FiatTransactionCreateNestedManyWithoutUserInput
    buy_orders?: BuyOrderCreateNestedManyWithoutUserInput
    sell_orders?: SellOrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCrypto_walletInput = {
    user_id?: number
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    transactions?: TransactionUncheckedCreateNestedManyWithoutFrom_userInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutTo_userInput
    fiatTransaction?: FiatTransactionUncheckedCreateNestedManyWithoutUserInput
    buy_orders?: BuyOrderUncheckedCreateNestedManyWithoutUserInput
    sell_orders?: SellOrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCrypto_walletInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCrypto_walletInput, UserUncheckedCreateWithoutCrypto_walletInput>
  }

  export type CryptocurrencyCreateWithoutCrypto_walletInput = {
    name: string
    symbol: string
    price_usd: number
    transactions?: TransactionCreateNestedManyWithoutCryptocurrencyInput
    buy_orders?: BuyOrderCreateNestedManyWithoutCryptocurrencyInput
    sell_orders?: SellOrderCreateNestedManyWithoutCryptocurrencyInput
  }

  export type CryptocurrencyUncheckedCreateWithoutCrypto_walletInput = {
    crypto_id?: number
    name: string
    symbol: string
    price_usd: number
    transactions?: TransactionUncheckedCreateNestedManyWithoutCryptocurrencyInput
    buy_orders?: BuyOrderUncheckedCreateNestedManyWithoutCryptocurrencyInput
    sell_orders?: SellOrderUncheckedCreateNestedManyWithoutCryptocurrencyInput
  }

  export type CryptocurrencyCreateOrConnectWithoutCrypto_walletInput = {
    where: CryptocurrencyWhereUniqueInput
    create: XOR<CryptocurrencyCreateWithoutCrypto_walletInput, CryptocurrencyUncheckedCreateWithoutCrypto_walletInput>
  }

  export type UserUpsertWithoutCrypto_walletInput = {
    update: XOR<UserUpdateWithoutCrypto_walletInput, UserUncheckedUpdateWithoutCrypto_walletInput>
    create: XOR<UserCreateWithoutCrypto_walletInput, UserUncheckedCreateWithoutCrypto_walletInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCrypto_walletInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCrypto_walletInput, UserUncheckedUpdateWithoutCrypto_walletInput>
  }

  export type UserUpdateWithoutCrypto_walletInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    transactions?: TransactionUpdateManyWithoutFrom_userNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutTo_userNestedInput
    fiatTransaction?: FiatTransactionUpdateManyWithoutUserNestedInput
    buy_orders?: BuyOrderUpdateManyWithoutUserNestedInput
    sell_orders?: SellOrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCrypto_walletInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    transactions?: TransactionUncheckedUpdateManyWithoutFrom_userNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutTo_userNestedInput
    fiatTransaction?: FiatTransactionUncheckedUpdateManyWithoutUserNestedInput
    buy_orders?: BuyOrderUncheckedUpdateManyWithoutUserNestedInput
    sell_orders?: SellOrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CryptocurrencyUpsertWithoutCrypto_walletInput = {
    update: XOR<CryptocurrencyUpdateWithoutCrypto_walletInput, CryptocurrencyUncheckedUpdateWithoutCrypto_walletInput>
    create: XOR<CryptocurrencyCreateWithoutCrypto_walletInput, CryptocurrencyUncheckedCreateWithoutCrypto_walletInput>
    where?: CryptocurrencyWhereInput
  }

  export type CryptocurrencyUpdateToOneWithWhereWithoutCrypto_walletInput = {
    where?: CryptocurrencyWhereInput
    data: XOR<CryptocurrencyUpdateWithoutCrypto_walletInput, CryptocurrencyUncheckedUpdateWithoutCrypto_walletInput>
  }

  export type CryptocurrencyUpdateWithoutCrypto_walletInput = {
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    price_usd?: FloatFieldUpdateOperationsInput | number
    transactions?: TransactionUpdateManyWithoutCryptocurrencyNestedInput
    buy_orders?: BuyOrderUpdateManyWithoutCryptocurrencyNestedInput
    sell_orders?: SellOrderUpdateManyWithoutCryptocurrencyNestedInput
  }

  export type CryptocurrencyUncheckedUpdateWithoutCrypto_walletInput = {
    crypto_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    price_usd?: FloatFieldUpdateOperationsInput | number
    transactions?: TransactionUncheckedUpdateManyWithoutCryptocurrencyNestedInput
    buy_orders?: BuyOrderUncheckedUpdateManyWithoutCryptocurrencyNestedInput
    sell_orders?: SellOrderUncheckedUpdateManyWithoutCryptocurrencyNestedInput
  }

  export type UserCreateWithoutFiatTransactionInput = {
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    crypto_wallet?: CryptoWalletCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutFrom_userInput
    receivedTransactions?: TransactionCreateNestedManyWithoutTo_userInput
    buy_orders?: BuyOrderCreateNestedManyWithoutUserInput
    sell_orders?: SellOrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFiatTransactionInput = {
    user_id?: number
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    crypto_wallet?: CryptoWalletUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutFrom_userInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutTo_userInput
    buy_orders?: BuyOrderUncheckedCreateNestedManyWithoutUserInput
    sell_orders?: SellOrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFiatTransactionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFiatTransactionInput, UserUncheckedCreateWithoutFiatTransactionInput>
  }

  export type UserUpsertWithoutFiatTransactionInput = {
    update: XOR<UserUpdateWithoutFiatTransactionInput, UserUncheckedUpdateWithoutFiatTransactionInput>
    create: XOR<UserCreateWithoutFiatTransactionInput, UserUncheckedCreateWithoutFiatTransactionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFiatTransactionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFiatTransactionInput, UserUncheckedUpdateWithoutFiatTransactionInput>
  }

  export type UserUpdateWithoutFiatTransactionInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutFrom_userNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutTo_userNestedInput
    buy_orders?: BuyOrderUpdateManyWithoutUserNestedInput
    sell_orders?: SellOrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFiatTransactionInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutFrom_userNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutTo_userNestedInput
    buy_orders?: BuyOrderUncheckedUpdateManyWithoutUserNestedInput
    sell_orders?: SellOrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutBuy_ordersInput = {
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    crypto_wallet?: CryptoWalletCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutFrom_userInput
    receivedTransactions?: TransactionCreateNestedManyWithoutTo_userInput
    fiatTransaction?: FiatTransactionCreateNestedManyWithoutUserInput
    sell_orders?: SellOrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBuy_ordersInput = {
    user_id?: number
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    crypto_wallet?: CryptoWalletUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutFrom_userInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutTo_userInput
    fiatTransaction?: FiatTransactionUncheckedCreateNestedManyWithoutUserInput
    sell_orders?: SellOrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBuy_ordersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBuy_ordersInput, UserUncheckedCreateWithoutBuy_ordersInput>
  }

  export type CryptocurrencyCreateWithoutBuy_ordersInput = {
    name: string
    symbol: string
    price_usd: number
    transactions?: TransactionCreateNestedManyWithoutCryptocurrencyInput
    crypto_wallet?: CryptoWalletCreateNestedManyWithoutCryptocurrencyInput
    sell_orders?: SellOrderCreateNestedManyWithoutCryptocurrencyInput
  }

  export type CryptocurrencyUncheckedCreateWithoutBuy_ordersInput = {
    crypto_id?: number
    name: string
    symbol: string
    price_usd: number
    transactions?: TransactionUncheckedCreateNestedManyWithoutCryptocurrencyInput
    crypto_wallet?: CryptoWalletUncheckedCreateNestedManyWithoutCryptocurrencyInput
    sell_orders?: SellOrderUncheckedCreateNestedManyWithoutCryptocurrencyInput
  }

  export type CryptocurrencyCreateOrConnectWithoutBuy_ordersInput = {
    where: CryptocurrencyWhereUniqueInput
    create: XOR<CryptocurrencyCreateWithoutBuy_ordersInput, CryptocurrencyUncheckedCreateWithoutBuy_ordersInput>
  }

  export type UserUpsertWithoutBuy_ordersInput = {
    update: XOR<UserUpdateWithoutBuy_ordersInput, UserUncheckedUpdateWithoutBuy_ordersInput>
    create: XOR<UserCreateWithoutBuy_ordersInput, UserUncheckedCreateWithoutBuy_ordersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBuy_ordersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBuy_ordersInput, UserUncheckedUpdateWithoutBuy_ordersInput>
  }

  export type UserUpdateWithoutBuy_ordersInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutFrom_userNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutTo_userNestedInput
    fiatTransaction?: FiatTransactionUpdateManyWithoutUserNestedInput
    sell_orders?: SellOrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBuy_ordersInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutFrom_userNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutTo_userNestedInput
    fiatTransaction?: FiatTransactionUncheckedUpdateManyWithoutUserNestedInput
    sell_orders?: SellOrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CryptocurrencyUpsertWithoutBuy_ordersInput = {
    update: XOR<CryptocurrencyUpdateWithoutBuy_ordersInput, CryptocurrencyUncheckedUpdateWithoutBuy_ordersInput>
    create: XOR<CryptocurrencyCreateWithoutBuy_ordersInput, CryptocurrencyUncheckedCreateWithoutBuy_ordersInput>
    where?: CryptocurrencyWhereInput
  }

  export type CryptocurrencyUpdateToOneWithWhereWithoutBuy_ordersInput = {
    where?: CryptocurrencyWhereInput
    data: XOR<CryptocurrencyUpdateWithoutBuy_ordersInput, CryptocurrencyUncheckedUpdateWithoutBuy_ordersInput>
  }

  export type CryptocurrencyUpdateWithoutBuy_ordersInput = {
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    price_usd?: FloatFieldUpdateOperationsInput | number
    transactions?: TransactionUpdateManyWithoutCryptocurrencyNestedInput
    crypto_wallet?: CryptoWalletUpdateManyWithoutCryptocurrencyNestedInput
    sell_orders?: SellOrderUpdateManyWithoutCryptocurrencyNestedInput
  }

  export type CryptocurrencyUncheckedUpdateWithoutBuy_ordersInput = {
    crypto_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    price_usd?: FloatFieldUpdateOperationsInput | number
    transactions?: TransactionUncheckedUpdateManyWithoutCryptocurrencyNestedInput
    crypto_wallet?: CryptoWalletUncheckedUpdateManyWithoutCryptocurrencyNestedInput
    sell_orders?: SellOrderUncheckedUpdateManyWithoutCryptocurrencyNestedInput
  }

  export type UserCreateWithoutSell_ordersInput = {
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    crypto_wallet?: CryptoWalletCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutFrom_userInput
    receivedTransactions?: TransactionCreateNestedManyWithoutTo_userInput
    fiatTransaction?: FiatTransactionCreateNestedManyWithoutUserInput
    buy_orders?: BuyOrderCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSell_ordersInput = {
    user_id?: number
    username: string
    email: string
    phone_number: string
    password: string
    fiat_balance?: number
    crypto_wallet?: CryptoWalletUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutFrom_userInput
    receivedTransactions?: TransactionUncheckedCreateNestedManyWithoutTo_userInput
    fiatTransaction?: FiatTransactionUncheckedCreateNestedManyWithoutUserInput
    buy_orders?: BuyOrderUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSell_ordersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSell_ordersInput, UserUncheckedCreateWithoutSell_ordersInput>
  }

  export type CryptocurrencyCreateWithoutSell_ordersInput = {
    name: string
    symbol: string
    price_usd: number
    transactions?: TransactionCreateNestedManyWithoutCryptocurrencyInput
    crypto_wallet?: CryptoWalletCreateNestedManyWithoutCryptocurrencyInput
    buy_orders?: BuyOrderCreateNestedManyWithoutCryptocurrencyInput
  }

  export type CryptocurrencyUncheckedCreateWithoutSell_ordersInput = {
    crypto_id?: number
    name: string
    symbol: string
    price_usd: number
    transactions?: TransactionUncheckedCreateNestedManyWithoutCryptocurrencyInput
    crypto_wallet?: CryptoWalletUncheckedCreateNestedManyWithoutCryptocurrencyInput
    buy_orders?: BuyOrderUncheckedCreateNestedManyWithoutCryptocurrencyInput
  }

  export type CryptocurrencyCreateOrConnectWithoutSell_ordersInput = {
    where: CryptocurrencyWhereUniqueInput
    create: XOR<CryptocurrencyCreateWithoutSell_ordersInput, CryptocurrencyUncheckedCreateWithoutSell_ordersInput>
  }

  export type UserUpsertWithoutSell_ordersInput = {
    update: XOR<UserUpdateWithoutSell_ordersInput, UserUncheckedUpdateWithoutSell_ordersInput>
    create: XOR<UserCreateWithoutSell_ordersInput, UserUncheckedCreateWithoutSell_ordersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSell_ordersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSell_ordersInput, UserUncheckedUpdateWithoutSell_ordersInput>
  }

  export type UserUpdateWithoutSell_ordersInput = {
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUpdateManyWithoutUserNestedInput
    transactions?: TransactionUpdateManyWithoutFrom_userNestedInput
    receivedTransactions?: TransactionUpdateManyWithoutTo_userNestedInput
    fiatTransaction?: FiatTransactionUpdateManyWithoutUserNestedInput
    buy_orders?: BuyOrderUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSell_ordersInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone_number?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    fiat_balance?: FloatFieldUpdateOperationsInput | number
    crypto_wallet?: CryptoWalletUncheckedUpdateManyWithoutUserNestedInput
    transactions?: TransactionUncheckedUpdateManyWithoutFrom_userNestedInput
    receivedTransactions?: TransactionUncheckedUpdateManyWithoutTo_userNestedInput
    fiatTransaction?: FiatTransactionUncheckedUpdateManyWithoutUserNestedInput
    buy_orders?: BuyOrderUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CryptocurrencyUpsertWithoutSell_ordersInput = {
    update: XOR<CryptocurrencyUpdateWithoutSell_ordersInput, CryptocurrencyUncheckedUpdateWithoutSell_ordersInput>
    create: XOR<CryptocurrencyCreateWithoutSell_ordersInput, CryptocurrencyUncheckedCreateWithoutSell_ordersInput>
    where?: CryptocurrencyWhereInput
  }

  export type CryptocurrencyUpdateToOneWithWhereWithoutSell_ordersInput = {
    where?: CryptocurrencyWhereInput
    data: XOR<CryptocurrencyUpdateWithoutSell_ordersInput, CryptocurrencyUncheckedUpdateWithoutSell_ordersInput>
  }

  export type CryptocurrencyUpdateWithoutSell_ordersInput = {
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    price_usd?: FloatFieldUpdateOperationsInput | number
    transactions?: TransactionUpdateManyWithoutCryptocurrencyNestedInput
    crypto_wallet?: CryptoWalletUpdateManyWithoutCryptocurrencyNestedInput
    buy_orders?: BuyOrderUpdateManyWithoutCryptocurrencyNestedInput
  }

  export type CryptocurrencyUncheckedUpdateWithoutSell_ordersInput = {
    crypto_id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    symbol?: StringFieldUpdateOperationsInput | string
    price_usd?: FloatFieldUpdateOperationsInput | number
    transactions?: TransactionUncheckedUpdateManyWithoutCryptocurrencyNestedInput
    crypto_wallet?: CryptoWalletUncheckedUpdateManyWithoutCryptocurrencyNestedInput
    buy_orders?: BuyOrderUncheckedUpdateManyWithoutCryptocurrencyNestedInput
  }

  export type CryptoWalletCreateManyUserInput = {
    wallet_id?: number
    crypto_id: number
    balance?: number
  }

  export type TransactionCreateManyFrom_userInput = {
    transaction_id?: number
    to_user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    transaction_type: string
    timestamp?: Date | string
  }

  export type TransactionCreateManyTo_userInput = {
    transaction_id?: number
    from_user_id: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    transaction_type: string
    timestamp?: Date | string
  }

  export type FiatTransactionCreateManyUserInput = {
    fiat_transaction_id?: number
    amount: number
    fiat_type: string
    transaction_type: string
    transaction_date?: Date | string
  }

  export type BuyOrderCreateManyUserInput = {
    buy_order_id?: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
  }

  export type SellOrderCreateManyUserInput = {
    sell_order_id?: number
    crypto_id: number
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
  }

  export type CryptoWalletUpdateWithoutUserInput = {
    balance?: FloatFieldUpdateOperationsInput | number
    cryptocurrency?: CryptocurrencyUpdateOneRequiredWithoutCrypto_walletNestedInput
  }

  export type CryptoWalletUncheckedUpdateWithoutUserInput = {
    wallet_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
  }

  export type CryptoWalletUncheckedUpdateManyWithoutUserInput = {
    wallet_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
  }

  export type TransactionUpdateWithoutFrom_userInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    to_user?: UserUpdateOneRequiredWithoutReceivedTransactionsNestedInput
    cryptocurrency?: CryptocurrencyUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutFrom_userInput = {
    transaction_id?: IntFieldUpdateOperationsInput | number
    to_user_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutFrom_userInput = {
    transaction_id?: IntFieldUpdateOperationsInput | number
    to_user_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUpdateWithoutTo_userInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    from_user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
    cryptocurrency?: CryptocurrencyUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutTo_userInput = {
    transaction_id?: IntFieldUpdateOperationsInput | number
    from_user_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutTo_userInput = {
    transaction_id?: IntFieldUpdateOperationsInput | number
    from_user_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FiatTransactionUpdateWithoutUserInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_type?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FiatTransactionUncheckedUpdateWithoutUserInput = {
    fiat_transaction_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_type?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FiatTransactionUncheckedUpdateManyWithoutUserInput = {
    fiat_transaction_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_type?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyOrderUpdateWithoutUserInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    cryptocurrency?: CryptocurrencyUpdateOneRequiredWithoutBuy_ordersNestedInput
  }

  export type BuyOrderUncheckedUpdateWithoutUserInput = {
    buy_order_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyOrderUncheckedUpdateManyWithoutUserInput = {
    buy_order_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellOrderUpdateWithoutUserInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    cryptocurrency?: CryptocurrencyUpdateOneRequiredWithoutSell_ordersNestedInput
  }

  export type SellOrderUncheckedUpdateWithoutUserInput = {
    sell_order_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellOrderUncheckedUpdateManyWithoutUserInput = {
    sell_order_id?: IntFieldUpdateOperationsInput | number
    crypto_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyCryptocurrencyInput = {
    transaction_id?: number
    from_user_id: number
    to_user_id: number
    amount: number
    fiat_amount: number
    status?: string
    transaction_type: string
    timestamp?: Date | string
  }

  export type CryptoWalletCreateManyCryptocurrencyInput = {
    wallet_id?: number
    user_id: number
    balance?: number
  }

  export type BuyOrderCreateManyCryptocurrencyInput = {
    buy_order_id?: number
    user_id: number
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
  }

  export type SellOrderCreateManyCryptocurrencyInput = {
    sell_order_id?: number
    user_id: number
    amount: number
    fiat_amount: number
    status?: string
    timestamp?: Date | string
  }

  export type TransactionUpdateWithoutCryptocurrencyInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    from_user?: UserUpdateOneRequiredWithoutTransactionsNestedInput
    to_user?: UserUpdateOneRequiredWithoutReceivedTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateWithoutCryptocurrencyInput = {
    transaction_id?: IntFieldUpdateOperationsInput | number
    from_user_id?: IntFieldUpdateOperationsInput | number
    to_user_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutCryptocurrencyInput = {
    transaction_id?: IntFieldUpdateOperationsInput | number
    from_user_id?: IntFieldUpdateOperationsInput | number
    to_user_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    transaction_type?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CryptoWalletUpdateWithoutCryptocurrencyInput = {
    balance?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutCrypto_walletNestedInput
  }

  export type CryptoWalletUncheckedUpdateWithoutCryptocurrencyInput = {
    wallet_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
  }

  export type CryptoWalletUncheckedUpdateManyWithoutCryptocurrencyInput = {
    wallet_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    balance?: FloatFieldUpdateOperationsInput | number
  }

  export type BuyOrderUpdateWithoutCryptocurrencyInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBuy_ordersNestedInput
  }

  export type BuyOrderUncheckedUpdateWithoutCryptocurrencyInput = {
    buy_order_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BuyOrderUncheckedUpdateManyWithoutCryptocurrencyInput = {
    buy_order_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellOrderUpdateWithoutCryptocurrencyInput = {
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSell_ordersNestedInput
  }

  export type SellOrderUncheckedUpdateWithoutCryptocurrencyInput = {
    sell_order_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SellOrderUncheckedUpdateManyWithoutCryptocurrencyInput = {
    sell_order_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    amount?: FloatFieldUpdateOperationsInput | number
    fiat_amount?: FloatFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}